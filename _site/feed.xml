<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2021-01-31T22:00:09+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">ho xuan vinh</title><subtitle>&quot;computer science, imagination, idea&quot;
</subtitle><author><name>Xuan Vinh Ho</name><email>hxvinh.hcmus@gmail.com</email></author><entry><title type="html">Breaking the Codenames’ code, or a fun Semi-Turing test</title><link href="http://localhost:4000/blog/2021-01-16-codenames-cheat-engine/" rel="alternate" type="text/html" title="Breaking the Codenames' code, or a fun Semi-Turing test" /><published>2021-01-16T00:00:00+08:00</published><updated>2021-01-16T00:00:00+08:00</updated><id>http://localhost:4000/blog/codenames-cheat-engine</id><content type="html" xml:base="http://localhost:4000/blog/2021-01-16-codenames-cheat-engine/">&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Codenames_(board_game)&quot;&gt;Codenames&lt;/a&gt; is a competitive two-team game, whose objective is given one-word clues, a team that can link to multiple words on the board without mistaking those forbidden or belong to the other team, and performs best, wins. Despite the simplicity, it goes beyond the surface. Words are interlinked semantically, but day by day, existing link fortified and a new one created exponentially, thanks to pop culture, the evolution of language, or even shared experience amongst players. Therefore, many people find the game very exciting.&lt;/p&gt;

&lt;p&gt;On one such occasion, I wonder if there is a sure-win strategy for the game. Instantly, I can think of an encoding scheme that embedding the keywords in one single move. However, code rarely conveys semantic link that people expect, and the fun lies in those meaning revealing moment. So more than often, you end up raising an eyebrow. A more legitimate way is that any words thrown out must establish a humanly acceptable link with the keywords. I find this challenge a weaker variant of Turing test: one human observes the game between two teams, knowingly one robot. He must tell from the picked clue, that it is machine-generated or comes from a natural mind. Without further ado, let me share with you my discovery.&lt;/p&gt;

&lt;blockquote class=&quot;lead&quot;&gt;
  &lt;p&gt;Turing proposed that a human evaluator would judge natural language conversations between a human and a machine designed to generate human-like responses. The evaluator would be aware that one of the two partners in conversation is a machine, and all participants would be separated from one another.&lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{120pt}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{120pt}&lt;/script&gt; - Wikipedia -&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;you-must-learn-to-walk-before-you-can-run&quot;&gt;You must learn to walk before you can run&lt;/h2&gt;

&lt;p&gt;To get warm-up, let’s start with the most simplified version of the game. As long as you follow the rule, no matter how nonsensical the clue is, your move is valid. In the game, there are 400 keywords in total. The board is a 5x5 grid of 25 squares, 9 are team blue’s words (blue agents), 8 are team red’s words (red agents), 7 are grey (innocent bystanders), and one is instant blackly lose (assassin). The blue team always plays first and must identify all blue agents before the red team finds their ones. The clue is a single word and a number, indicating how many keywords are associating with it.&lt;/p&gt;

&lt;p&gt;As a sure-win move, blue team must come up with a clue that connects to their 9 agents and manage not to pick a red agent (their turn ends) or an assassin. At this point, some of you may have derived a solution. Hint: the words’ position is the key. You can stop now and think. I would get my milk coffee and be back soon, no peeking, okay?&lt;/p&gt;

&lt;p&gt;So here comes my tactic. You need two materials, 1) encode the positions of blue agents into …, a code; and 2) a codebook to map the code to an English word. To attain 1), we question ourselves: “How many possible combinations of 9 squares in a 25-square boardgame?” Easy peasy, &lt;code class=&quot;MathJax_Preview&quot;&gt;C(n=25, r=9) = {25 \choose 9} = 2,042,975&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;C(n=25, r=9) = {25 \choose 9} = 2,042,975&lt;/script&gt;. So a combination can first be mapped to a digit, out of 2,042,975 possible values. To have 2), look for the dusted family dictionary, their alphabetical order is the code. Voila!&lt;/p&gt;

&lt;p&gt;It would be a perfect solution, except for a tiny detail. &lt;a href=&quot;https://www.bbc.com/news/world-44569277#:~:text=We%20considered%20dusting%20off%20the,to%20mention%2047%2C156%20obsolete%20words.&quot;&gt;BBC&lt;/a&gt; says there are only an estimated 171,146 words currently in use in the English language. Luckily, the game has quite a limited number of map cards, hence far fewer combinations to consider. I believe they want all the cards to scatter evenly across the board; otherwise, one can say “top” and an easy grab of 5 words, which gives an unfair advantage to the other team.&lt;/p&gt;

&lt;p&gt;I don’t have all the map cards at hand, but I bet if we scan through them all, more insight extracted, we can find a more efficient encoding scheme. Instead of combination, we can use word order or the gap between two adjacent cards as code materials. I hope that one of you can come up with a new one, and happily sharing with me.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2021-01-16/encoding_method.png&quot; alt=&quot;Fig01&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
Proposed encoding scheme with a 2,042,975-row codebook.&lt;/p&gt;

&lt;h2 id=&quot;a-fancy-ml-codebook&quot;&gt;A fancy ML codebook&lt;/h2&gt;

&lt;p&gt;You would no doubt no longer be invited to the next game night if using the above cheat. The clue does not convey any semantic link to pointed words is what it lacks. Gladly, data scientists do have a helpful toolkit for this occasion. Soonly replace Bag-of-Words when it first introduced, word vector method becomes a common practice to preprocess word token when fed into an NLP-related model, the neural network in particular.&lt;/p&gt;

&lt;p&gt;Learning vector space representation of words is often framed as a standalone unsupervised task, whose input a large corpus, i.e. text dataset, and output a collection of fix-length vectors, each corresponding to a word. As a result, the scalar distance (a function maps distance/angle between two vectors to a single numerical value) of a pair of word vectors, is proportional to how we think it’s semantically close. A typical example is &lt;em&gt;dimensions of meaning&lt;/em&gt;: the expression “king is to queen as man is to woman” is indeed captured in the vector equation &lt;code class=&quot;MathJax_Preview&quot;&gt;vector_{king} - vector_{queen} \approx vector_{man} - vector_{woman}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;vector_{king} - vector_{queen} \approx vector_{man} - vector_{woman}&lt;/script&gt;.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2021-01-16/king_queen_man_woman.png&quot; alt=&quot;Fig02&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
Vector equation &lt;code class=&quot;MathJax_Preview&quot;&gt;vector_{king} - vector_{queen} \approx vector_{man} - vector_{woman}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;vector_{king} - vector_{queen} \approx vector_{man} - vector_{woman}&lt;/script&gt; looks right. We project GloVe word vectors to 2D-space thanks to t-SNE, a visualization method retains the local and global difference between high dimensional data points.&lt;/p&gt;

&lt;p&gt;The key idea to encode word into such an arithmetic manner lies on two pieces of information: the co-occurrence of word pairs and neighbour words in a local context window. The former leverages the statistical characteristic, while the latter observes that words come together usually convey the same message or similar components of a bigger whole. Our word vector model of choice, &lt;a href=&quot;https://nlp.stanford.edu/projects/glove/&quot;&gt;GloVe&lt;/a&gt;, sides with the first approach and its objective - cost function - is defined as follows:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;J = \sum_{i, j=1}^V f(X_{ij}) (w_i^T\tilde{w}_j + b_i + \tilde{b}_j - \log{X_{ij}})^2 = \sum_{i, j=1}^V Term_1(X_{ij}) Term_2(w_i, \tilde{w}_j, b_i, \tilde{b}_j, \log{X_{ij}})&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;J = \sum_{i, j=1}^V f(X_{ij}) (w_i^T\tilde{w}_j + b_i + \tilde{b}_j - \log{X_{ij}})^2 = \sum_{i, j=1}^V Term_1(X_{ij}) Term_2(w_i, \tilde{w}_j, b_i, \tilde{b}_j, \log{X_{ij}})&lt;/script&gt;

&lt;p&gt;We denote &lt;code class=&quot;MathJax_Preview&quot;&gt;X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; the matrix of word-word co-occurence counts, an entry &lt;code class=&quot;MathJax_Preview&quot;&gt;X_{ij}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X_{ij}&lt;/script&gt; denotes the occurences of word &lt;code class=&quot;MathJax_Preview&quot;&gt;j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;j&lt;/script&gt; in the context of word &lt;code class=&quot;MathJax_Preview&quot;&gt;i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;. &lt;code class=&quot;MathJax_Preview&quot;&gt;w_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_i&lt;/script&gt; is the word vector of word &lt;code class=&quot;MathJax_Preview&quot;&gt;i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt;, the dot product &lt;code class=&quot;MathJax_Preview&quot;&gt;w_i^T\tilde{w}_j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_i^T\tilde{w}_j&lt;/script&gt; is a trick to map the vector difference into a single numerical value, bias &lt;code class=&quot;MathJax_Preview&quot;&gt;\tilde{b}_j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\tilde{b}_j&lt;/script&gt; is another trick to ensure &lt;code class=&quot;MathJax_Preview&quot;&gt;Term_2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Term_2&lt;/script&gt; produces the same result when word &lt;code class=&quot;MathJax_Preview&quot;&gt;w_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_i&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;w_j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w_j&lt;/script&gt; switch place. Intuitively, we train the word vector such that &lt;em&gt;semantic distance&lt;/em&gt; of a word pair forced close to its (log) occurence, with a nice touch that the more popular a pair &lt;code class=&quot;MathJax_Preview&quot;&gt;(i, j)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;(i, j)&lt;/script&gt;, the less weightage on their (&lt;code class=&quot;MathJax_Preview&quot;&gt;Term_1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Term_1&lt;/script&gt;), hence gives more room for less frequent pairs to be recognized.&lt;/p&gt;

&lt;p&gt;Enough of math, here is my idea to break Codenames: each word now can be represented as a data point, a high-dimensional vector. Consider all blue agents form into a cluster; we will compute a centroid (an average vector), then look for word closest to it. This is the clue, under the constraint that no agent from the other team or assassin nearby.&lt;/p&gt;

&lt;p&gt;As a proof of concept, I have prepared a list of 25 words, and the cluster I would like to test is &lt;code class=&quot;highlighter-rouge&quot;&gt;animal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;country&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;keyword_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'dragon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'green'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'newyork'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'australia'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'seal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'wake'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'robin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pool'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'france'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'trip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'duck'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ham'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'shark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'grace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'spell'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'buck'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dice'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bow'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'spring'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;'tube'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ghost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'brush'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'drill'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'cotton'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;clustered_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'seal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'duck'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'shark'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;centroid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compute_centroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glove_word_vector_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clustered_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;centroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_closest_word_to_centroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glove_word_vector_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clustered_word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Word represents for centroid:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Words closest to centroid in decreasing in similarity order.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;distance_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_closest_words_to_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glove_word_vector_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;centroid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ 0.35965732 -0.391844   -0.85795337  0.09057667  0.38060966  0.4850067
 -0.58749336 -0.15278     0.7602666  -0.49245334 -0.07784335  0.7132533
  0.90117663  0.96625996  0.02350167  0.06795999  0.40553665 -0.235831
 -1.23233     0.27397    -0.275833   -0.5657067   0.595513   -0.3247843
  0.09858334 -1.0315567  -0.13521235  0.6582633   0.17619233 -0.86915
  1.3573667  -0.20295    -0.13896     0.77146    -0.29841268  0.44444
  0.258672   -0.1362059   0.04270234 -0.72279334 -0.27866668 -0.01172899
 -0.02446666  0.28056666  0.6844953   0.06487999  0.177436   -0.34573865
  0.47711134 -0.11781999]
Word represents for centroid: cat 2.7491037845611572
Words closest to centroid in decreasing in similarity order.
duck 2.407698154449463
shark 2.6156086921691895
seal 2.919170379638672
dragon 3.653167486190796
ghost 3.685438394546509
buck 3.8235340118408203
green 4.058343887329102
brush 4.30176305770874
bow 4.380235195159912
robin 4.401726722717285
drill 4.477200508117676
spell 4.515389442443848
pool 4.539621353149414
spring 4.544600009918213
wake 4.570087432861328
pie 4.608753681182861
ham 4.763392925262451
tube 5.037248611450195
grace 5.125988960266113
trip 5.132474899291992
australia 5.255494594573975
cotton 5.462995529174805
dice 5.54638147354126
france 6.609094142913818
newyork 7.1939191818237305
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right off the bat, the centroid &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; captures nicely &lt;code class=&quot;highlighter-rouge&quot;&gt;animal&lt;/code&gt; cluster, surprisingly including even the imaginary one. However, the centroid for &lt;code class=&quot;highlighter-rouge&quot;&gt;[newyork, australia, france]&lt;/code&gt; omitted &lt;code class=&quot;highlighter-rouge&quot;&gt;newyork&lt;/code&gt;, plus centroid’s word is &lt;code class=&quot;highlighter-rouge&quot;&gt;prohertrib&lt;/code&gt;, which seems not a valid word. It could be a derived token during the corpus preprocessing, before train GloVe.&lt;/p&gt;

&lt;p&gt;This reminds me of another obstacle of our Turing test: the agents must be easily derived from the clue to produce a convincing win to the human evaluator. In other words, it’s good to come up with a clue, but better if it’s accompanied by a definable semantic link that connects the corresponding agents…&lt;/p&gt;

&lt;h2 id=&quot;another-codebook-but-breathe-into-life-by-humankind&quot;&gt;Another codebook, but breathe into life by humankind&lt;/h2&gt;

&lt;p&gt;Before the era of Deep Learning, most researchers put lots of hope in a rich human-labelled dataset. They expect that they can cultivate a good ML model that successfully captures intricate concepts defined by experts in the field at the end of the exhausting labour effort. Despite its root as a lexical database in psycholinguistics, on the same trend, &lt;a href=&quot;https://wordnet.princeton.edu/&quot;&gt;WordNet&lt;/a&gt; cannot escape from the keen eyes of computer scientists, hence becomes known as a “concept tree”, re-interpret and use as AI knowledge-based application.&lt;/p&gt;

&lt;p&gt;The literature of WordNet is vast. In the third proposal, I only care about the super-subordinate relation, also called hypernym/hyponym. To not disappoint my professors, I would carefully state this is an over-simplified understanding in exchange for the ease in readers’ mind.&lt;/p&gt;

&lt;p&gt;WordNet contains concepts, structured in a hierarchy representation. Each concept, or syn(nonym)set, groups words that are interchangable in certain context together. A synset is a more specific category of its hypernym and a broader category than its hyponyms. If such a relationship exists between two synsets, there is a semantic link connects them.&lt;/p&gt;

&lt;p&gt;An example of one possible synset for the word &lt;code class=&quot;highlighter-rouge&quot;&gt;dog&lt;/code&gt;, when tracing bottom-up to its hypernyms:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dog, domestic dog, Canis familiaris
└──canine, canid
   └──carnivore
      └──placental, placental mammal, eutherian, eutherian mammal
        └──mammal
           └──vertebrate, craniate
              └──chordate
                 └──animal, animate being, beast, brute, creature, fauna

                 - Wikipedia - 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A synset is denoted by a tuple of word, its Part-Of-Speech, and its index. One can also retrieve its definition and lemmas, i.e. words can use to express the concept. For example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Synset('slide.n.05') | Definition: the act of moving smoothly along a surface while remaining in contact with it | Lemmas: [slide, glide, coast]
Synset('satellite.n.03') | Definition: any celestial body orbiting around a planet or star | Lemmas: [satellite]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Lastly, there exist functions to compute the similarity score between any synset pair.
A sharp reader could have found the missing piece in our puzzle by now. Synset can play the same role as the centroid vector, while the definition gives us a mean to establish the clue-agents connection. Here is the proposed algorithm to generate a clue:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input&lt;/strong&gt;: blue agents, and the rest. &lt;strong&gt;Output&lt;/strong&gt;: a list of tuple (word, count).&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We retrieve each blue agent’s hypernyms, storing into the set &lt;code class=&quot;MathJax_Preview&quot;&gt;H_1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H_1&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;We form all possible synset pairs from blue agents. From each, we retrieve their common hypernymns and store into the set &lt;code class=&quot;MathJax_Preview&quot;&gt;H_2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;H_1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H_1&lt;/script&gt; union &lt;code class=&quot;MathJax_Preview&quot;&gt;H_2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H_2&lt;/script&gt; to form &lt;code class=&quot;MathJax_Preview&quot;&gt;H&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;For each hypernym in &lt;code class=&quot;MathJax_Preview&quot;&gt;H&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;H&lt;/script&gt;, count how many blue agents in the proximity of the hypernym without being violated by any non-blue agents. Rank them in decreasing order of count and output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sadly, the top results do not always make sense, so I use my judgement to pick the sensible one that covers as most agents as possible. This results in a suboptimal solution that does not guarantee a sure-win as intended and lasts for more than one turn.
I have run three games with the proposed algorithm, the Blue team wins two out of three in seven and nine turns, respectively. My readers, I would be pleased if you can help be my evaluator, and share your thoughts if these moves are perceived as human or not!&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2021-01-16/game_1.png&quot; alt=&quot;Fig03&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2021-01-16/game_2.png&quot; alt=&quot;Fig04&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2021-01-16/game_3.png&quot; alt=&quot;Fig05&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are fascinating insights that are helpful to players, for example, &lt;code class=&quot;highlighter-rouge&quot;&gt;hydrocarbon&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;fish&lt;/code&gt;. And I wonder if &lt;code class=&quot;highlighter-rouge&quot;&gt;criminal&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hood&lt;/code&gt; are direct references to the legendary outlaw or not. However, those like &lt;code class=&quot;highlighter-rouge&quot;&gt;unpleasant_woman&lt;/code&gt;, assume this is a valid word, a normal human-being unlikely to accept its link to &lt;code class=&quot;highlighter-rouge&quot;&gt;dragon&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;green&lt;/code&gt;. At an attempt to defend my algorithm, I would say this is a Shrek reference.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This &lt;a href=&quot;https://github.com/hovinh/codenames_cheat_engine&quot;&gt;Github repo&lt;/a&gt; contains code to produce the above result. My thanks to Chuang Ning for the three games.&lt;/p&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Codenames is a competitive two-team game, whose objective is given one-word clues, a team that can link to multiple words on the board without mistaking those forbidden or belong to the other team, and performs best, wins. Despite the simplicity, it goes beyond the surface. Words are interlinked semantically, but day by day, existing link fortified and a new one created exponentially, thanks to pop culture, the evolution of language, or even shared experience amongst players. Therefore, many people find the game very exciting.</summary></entry><entry><title type="html">Probabilistic Graphical Model 1 (Representation) - A note on Programming Assignments</title><link href="http://localhost:4000/blog/2019-12-25-pgm-programming-assignments/" rel="alternate" type="text/html" title="Probabilistic Graphical Model 1 (Representation) - A note on Programming Assignments" /><published>2019-12-25T00:00:00+08:00</published><updated>2019-12-25T00:00:00+08:00</updated><id>http://localhost:4000/blog/pgm-programming-assignments</id><content type="html" xml:base="http://localhost:4000/blog/2019-12-25-pgm-programming-assignments/">&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/strong&gt;: The content of this post is to facililate the learning process without sharing any solution, hence this does not violate the Coursera Honor Code.&lt;/p&gt;

&lt;blockquote class=&quot;lead&quot;&gt;
  &lt;p&gt;“My enjoyment is reading about Probabilistic Graphical Models […] I don’t know, just love the beauty it is.”&lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt}&lt;/script&gt; Someone I know via Linkedin - TTP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These sentences best describe my feeling for PGM, which in turn motivates me to sign up for this course. In contrast to my expectation, I starred it 3 out of 5, mentally.&lt;/p&gt;

&lt;p&gt;It’s interesting that Daphne using the top-down approach, introducing a bit of magic terms here and there, then slowly reveals them lesson by lesson; this seems to be an effective approach for such vast field.
I have taken a similar course once in university, so I have a rough idea of what’s going on and will not consider this one too challenging. However, as discussed numerously in User ratings, the Programming Assignments (PA) are super hard, primarily in the vague instruction rather than learner’s programming skills, which faifully warned in the Course description. Probably that’s why they made PA optional, and user can still earn a certificate by completing quizzes solely.&lt;/p&gt;

&lt;p&gt;To my belief, a man can’t claim himself master of a subject unless he can recreate it himself, and I did try real hard to get all those PAs complete. You easily spend 20 hours plus for a single PA due to no proper feedback and a lot of assumptions left hanging in the air. I understand this course is 8 years old, so one could not expect much support as those early days, though there should be some concrete materials for late learners to refer to.&lt;/p&gt;

&lt;p&gt;I managed to complete 3/4 PAs, leaving the last one unfinished after 2 weeks and decided to cancel my subscription. However, I thought it should be helpful that some upcoming learners have a solicited source of reference to complete his/her journey, and in return, provide useful tips so I and others can fulfill ours as well.&lt;/p&gt;

&lt;p&gt;This is not a review of the course, but a guideline to complete the four PAs, and I’m looking forward to all constructive feedback from you readers to make it better! 
I will not bother to explain the content for each week, but mainly focus on important concepts that one must understand to complete the PAs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#week-1-introduction--overview--bayesian-network&quot;&gt;Week 1:  Introduction &amp;amp; Overview | Bayesian Network&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#week-2-template-models-and-structured-cpds-for-bayesian-networks&quot;&gt;Week 2: Template Models and Structured CPDs for Bayesian Networks&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#week-3-markov-network-fundamentals&quot;&gt;Week 3: Markov Network Fundamentals&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#week-4-decision-theory&quot;&gt;Week 4: Decision Theory&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;week-1-introduction--overview--bayesian-network&quot;&gt;Week 1: Introduction &amp;amp; Overview | Bayesian Network&lt;/h2&gt;
&lt;p&gt;Factor &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi \in \Phi&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi \in \Phi&lt;/script&gt; is a mapping function of assigned variables &lt;code class=&quot;MathJax_Preview&quot;&gt;X = \{(X_{1}, X_{2}), ..., X_{n})\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X = \{(X_{1}, X_{2}), ..., X_{n})\}&lt;/script&gt;, say, a realization of random variables, to a numerical value &lt;code class=&quot;MathJax_Preview&quot;&gt;\in \mathbb{R}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\in \mathbb{R}&lt;/script&gt;; this is a more general instance of Probility Density Function(PDF)\Conditional Probability Distribution(CPF), which comes in handy as fundamental building block for defining distributions in high-dimensional spaces. A factor &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(D)&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;D \subseteq X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D \subseteq X&lt;/script&gt; has two operations: Factor Marginalization and Factor Product.&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;Factor Marginalization &lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt} \phi(D) = \sum_{i \in I}\phi(I, D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt} \phi(D) = \sum_{i \in I}\phi(I, D)&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is a value that can be assigned to variable &lt;code class=&quot;MathJax_Preview&quot;&gt;I \in X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;I \in X&lt;/script&gt;&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;Factor Product &lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt} \phi(D) = \prod_{\phi' \in S(D)} \phi'(X')&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt} \phi(D) = \prod_{\phi' \in S(D)} \phi'(X')&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{3pt}S(D) = \{\phi \in \Phi |&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{3pt}S(D) = \{\phi \in \Phi |&lt;/script&gt; whose argument &lt;code class=&quot;MathJax_Preview&quot;&gt;X' \subset D \subseteq X\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X' \subset D \subseteq X\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;Environment setup&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; &quot;&gt;Octave&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There is a PA in the first week, and you have to install and familarize yourself with Octave/MATLAB, which admittedly is not an easy task for a fresh coder. 
Despite the steep learning curve, I found that the tutorial is sufficient for you to get started. 
I strongly suggest you to opt for Octave since it’s free and I have no problem with it to submit the solution.
Below is a cheatsheet for commands you’re likely to use.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Command&lt;/th&gt;
      &lt;th&gt;Usage&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;disp(a)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Display the value of variable &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v = start:step:end&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Create a vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v=[start, start+step, start+2*step, ..., end]&lt;/code&gt;. Useful in &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ones(n_rows, n_columns)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;(n_rows&lt;/code&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;\times&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\times&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;n_columns)&lt;/code&gt; matrix with all values are assigned to 1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zeros(n_rows, n_columns)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;(n_rows&lt;/code&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;\times&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\times&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;n_columns)&lt;/code&gt; matrix with all values are assigned to 0.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;columns(M)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Advisable to retrieve the number of columns in a 2-dimensional matrix &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rows(M)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Advisable to retrieve the number of rows in a 2-dimensional matrix &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;length(v)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Advisable to retrieve the number of elements in a 1-dimensional vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M(:, column_idx)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Retrieve/assign value for the elements in &lt;code class=&quot;highlighter-rouge&quot;&gt;column_idx&lt;/code&gt; in each row of matrix &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;. &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;column_idx&lt;/code&gt; could be an index or vector of indexes.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M(row_idx, :)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Retrieve/assign value for the elements in &lt;code class=&quot;highlighter-rouge&quot;&gt;row_idx&lt;/code&gt; in each column of matrix &lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;. &lt;br /&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;column_idx&lt;/code&gt; could be an index or vector of indexes.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M(:)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;(n_rows&lt;/code&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;\times&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\times&lt;/script&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;n_columns)&lt;/code&gt; matrix is flatted out to a 1-dimensional vector with &lt;code class=&quot;highlighter-rouge&quot;&gt;(n_rows * n_columns)&lt;/code&gt; elements.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v(idx)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Retrieve/assign value for the elements in &lt;code class=&quot;highlighter-rouge&quot;&gt;idx&lt;/code&gt; of a vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;. The first element in &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; has index 1.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[a, b]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Concatenate 2 variables into a vector. This could be used for vector/matrix along the column axis.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[a; b]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Concatenate 2 variables into a vector. This could be used for vector/matrix along the row axis.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sum(v)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Compute the summation of all elements in vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prod(v)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Compute the multiplication of all elements in vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for i=start:step:end,&lt;/code&gt;&lt;br /&gt;     &lt;code class=&quot;highlighter-rouge&quot;&gt;% do something here;&lt;/code&gt;&lt;br /&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;end;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, repeated &lt;code class=&quot;highlighter-rouge&quot;&gt;(end-start)/end+1&lt;/code&gt; times.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort(v, mode='descend')&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Return sorted values of vector &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; and corresponding indexes in the original.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setdiff(a, b)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Return unique elements in &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; but not &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;% a commment&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; to comment out a line, hence you do not need to delete a statement if unnecessary.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Octave is famous for vectorization, which is optimized for whole-array task where the operations could be done independently among elements, e.g. taking element-wise summation between two same-length vectors. 
Interested readers can find the beginning guide &lt;a href=&quot;https://octave.org/doc/v4.0.1/Basic-Vectorization.html&quot;&gt;here&lt;/a&gt;, though within the scope of this particular course, I think you can do just fine without it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One last thing, it’s not easy to write hundreds line of code, some of them are repetitive, without being confused or do it faultlessly. 
Function is a good way to group statements serving a common purpose together, then we can use it abstractly (as a blackbox) and have zero care about the underlying implementation. This makes your code more concise and improve readability/efficacy of your code base a lot. In upcoming PAs, each function is defined in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.m&lt;/code&gt; file, with following template:&lt;/p&gt;

&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DoSomethingFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;% Your code statements are here.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;% output must be assigned value before reaching the &quot;end&quot; command.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assume you understand the correct format of input and output, you can simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;a = DoSomethingFunction(i1, i2)&lt;/code&gt; as supporting function for any higher-level task, given that the &lt;code class=&quot;highlighter-rouge&quot;&gt;DoSomethingFunction.m&lt;/code&gt; file and your code are both under the same directory.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; &quot;&gt;SamIam&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I follow instruction in .pdf file to install JRE, JDK and &lt;a href=&quot;http://reasoning.cs.ucla.edu/samiam/index.php&quot;&gt;Samiam 3.0&lt;/a&gt;. There are 3 things you need to know before using this program (&lt;a href=&quot;https://www.coursera.org/learn/probabilistic-graphical-models/discussions/weeks/1/threads/x6gjQnSpEeidsxL9ymwRIA&quot;&gt;ref&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;make sure that you have the Java Runtime installed and can run “java.exe” from the cmd line.&lt;/li&gt;
  &lt;li&gt;to make &lt;code class=&quot;highlighter-rouge&quot;&gt;samiam.bat&lt;/code&gt; runnable, replace its whole content with below code:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VMARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-Xruncalljvmti -Xms8m -Xmx512m -classpath samiam.jar;inflib.jar edu.ucla.belief.ui.UI

java.exe %VMARGS% -launchcommand &lt;span class=&quot;s2&quot;&gt;&quot;%EXECCMD% %VMARGS% %*&quot;&lt;/span&gt; -launchscript %0 %&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;open terminal (Command Prompt) and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; to your SamIam folder, type in below command to get it started.
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;samiam.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; &quot;&gt;3.1 Basic factor operations&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Factor is implemented as &lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt; in Octave - a data structure has its content manifested in field-value pair. In PAs, factors are defined in 2 ways:&lt;/p&gt;
&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'var'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'card'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'val'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;card&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; are &lt;strong&gt;&lt;em&gt;fields&lt;/em&gt;&lt;/strong&gt;, and vectors on the other side of equality signs are &lt;strong&gt;&lt;em&gt;values&lt;/em&gt;&lt;/strong&gt;. One can retrieve or manipulate value of field in the second way. These variables are equivalent to Factor definition above: &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; is &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; is &lt;code class=&quot;MathJax_Preview&quot;&gt;D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;card&lt;/code&gt; is &lt;code class=&quot;MathJax_Preview&quot;&gt;[\mid X_1 \mid, \mid X_2 \mid, ..., \mid X_k \mid]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[\mid X_1 \mid, \mid X_2 \mid, ..., \mid X_k \mid]&lt;/script&gt; - how many value each variable can be assigned, and &lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt; is vector of values for each assignment of &lt;code class=&quot;MathJax_Preview&quot;&gt;D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;. One observation is &lt;code class=&quot;highlighter-rouge&quot;&gt;lenght(C.val) = prod(C.card)&lt;/code&gt; and you need to understand why.&lt;/p&gt;

&lt;p&gt;Assume we have a factor &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(X_1, X_2, X_3)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(X_1, X_2, X_3)&lt;/script&gt;, each variable can be assigned values in these sets &lt;code class=&quot;MathJax_Preview&quot;&gt;\{1; 2\}, \{1, 2, 3\}, \{1\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\{1; 2\}, \{1, 2, 3\}, \{1\}&lt;/script&gt;, respectively. Hence, the set of joint assignments of &lt;code class=&quot;MathJax_Preview&quot;&gt;[X_1, X_2, X_3]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[X_1, X_2, X_3]&lt;/script&gt; is &lt;code class=&quot;MathJax_Preview&quot;&gt;[1;1;1], [2;1;1], [1;2;1], [2;2;1], [1;3;1], [2;3;1]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[1;1;1], [2;1;1], [1;2;1], [2;2;1], [1;3;1], [2;3;1]&lt;/script&gt;, and the corresponding value is what stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;C.var&lt;/code&gt;. To retrieve the value of an assignment, you need to know the &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; of &lt;code class=&quot;MathJax_Preview&quot;&gt;[X_1, X_2, X_3]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[X_1, X_2, X_3]&lt;/script&gt;, in turn obtain the corresponding &lt;strong&gt;&lt;em&gt;index&lt;/em&gt;&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;C.var&lt;/code&gt;, then simply call &lt;code class=&quot;highlighter-rouge&quot;&gt;C.var[index]&lt;/code&gt;.  Luckily, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;IndexToAssignment&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AssignmentToIndex&lt;/code&gt; to serve this purpose.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;The order of variables telling which has assignment changes most rapidly, in decreasing order from left to right.&lt;/li&gt;
    &lt;li&gt;When factor are used to represent a node has parent, e.g. CPD, that node (variable) is always the first variable in &lt;code class=&quot;highlighter-rouge&quot;&gt;C.var&lt;/code&gt;, then its parents.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;By now, the instruction for &lt;em&gt;FactorProduct&lt;/em&gt;, &lt;em&gt;FactorMarginalization&lt;/em&gt;, and &lt;em&gt;ObserveEvidence&lt;/em&gt; should be clear to readers.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; &quot;&gt;3.2 Computing the joint distribution&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The term distribution and factor are used interchangeably in this case, hence chain rule can be rewritten for factor as&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\phi(X_1, ..., X_n) = \prod_{i \in \mathbb{Z}: i \in [1;n]} \phi(X_i|Parent_G(X_i))&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\phi(X_1, ..., X_n) = \prod_{i \in \mathbb{Z}: i \in [1;n]} \phi(X_i|Parent_G(X_i))&lt;/script&gt;

&lt;p&gt;As a common knowledge, use your work on the PREVIOUS QUESTION.&lt;/p&gt;

&lt;h2 id=&quot;week-2-template-models-and-structured-cpds-for-bayesian-networks&quot;&gt;Week 2: Template Models and Structured CPDs for Bayesian Networks&lt;/h2&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;2.2.1 Constructing Phenotype Factors for a Mendelian Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;phenotypeGivenGenotypeMendelianFactor&lt;/code&gt; is the factor type 1. Let’s call the to-be-computed CPD &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(P, G) = \Pr (P \mid G)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(P, G) = \Pr (P \mid G)&lt;/script&gt;, its &lt;em&gt;phenotype variable&lt;/em&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;P&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;P&lt;/script&gt; and &lt;em&gt;genotype variabe&lt;/em&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;G&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt;. Since we simulate the Tay-Sachs disease, this implies &lt;code class=&quot;MathJax_Preview&quot;&gt;P=\{ Has, DoNotHave \}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;P=\{ Has, DoNotHave \}&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;G=\{TT, Tt, tt\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;G=\{TT, Tt, tt\}&lt;/script&gt; (notice the order of assignments here and carefully think how the order looks like when joint assignments formed by both variables). Because Tay-Sachs is a recessive trait, which means only &lt;code class=&quot;MathJax_Preview&quot;&gt;tt&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;tt&lt;/script&gt;  makes the person have the physical trait with &lt;strong&gt;&lt;em&gt;absolute certainty&lt;/em&gt;&lt;/strong&gt;. Even though the use case solely focuses on recessive trait, reader must utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;isDominant&lt;/code&gt; to implement the function such that it could be generalized for the counterpart, meaning a person having physical manifested with either &lt;code class=&quot;MathJax_Preview&quot;&gt;TT&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;TT&lt;/script&gt; or &lt;code class=&quot;MathJax_Preview&quot;&gt;Tt&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Tt&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;2.2.2 Constructing Phenotype Factors for a Non-Mendelian Model&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;In Non-Mendelian model, the number of alleles is not limited to 2 (e.g. &lt;code class=&quot;MathJax_Preview&quot;&gt;t&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;T&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; in 2.2.1) but could be more. Assume the number of alleles &lt;code class=&quot;MathJax_Preview&quot;&gt;n=3&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;n=3&lt;/script&gt; (&lt;code class=&quot;MathJax_Preview&quot;&gt;\{a, b, c\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\{a, b, c\}&lt;/script&gt;), we have &lt;code class=&quot;MathJax_Preview&quot;&gt;\binom{n}{2}=\binom{3}{2}=3&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\binom{n}{2}=\binom{3}{2}=3&lt;/script&gt; (&lt;code class=&quot;MathJax_Preview&quot;&gt;ab, ac, bc&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;ab, ac, bc&lt;/script&gt;) &lt;code class=&quot;MathJax_Preview&quot;&gt;+n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;+n&lt;/script&gt; (&lt;code class=&quot;MathJax_Preview&quot;&gt;aa, bb, cc&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;aa, bb, cc&lt;/script&gt;) possible genotypes. Luckily, we don’t need to worry about creating such pair, but only how many of them; the corresponding values for each genotype assignment is available in &lt;code class=&quot;highlighter-rouge&quot;&gt;alphaList&lt;/code&gt; already. Remember that a probability is defined correctly when the total sum of its non-negative component is &lt;code class=&quot;MathJax_Preview&quot;&gt;1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;2.2.3 Constructing Genotype Factors for Ancestral Nodes&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Readers can utilize the index in &lt;code class=&quot;highlighter-rouge&quot;&gt;.val&lt;/code&gt; to retrieve corresponding genotype assignment, then break it to constituent alleles to compute the required probability.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;2.2.4 Constructing Genotype Factors for Nodes with Parents&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The complex task can be broken down to 2 sub-tasks:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How can I determine the child genotype probability given a particular genotype pair of parents? (check out Figure below).&lt;/li&gt;
  &lt;li&gt;I need to &lt;strong&gt;&lt;em&gt;scan through&lt;/em&gt;&lt;/strong&gt; all combinations of parents’ genotype pairs to determine child genotype probability for each of the case. Note that the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;.val&lt;/code&gt; is now triple what we have in 2.2.3.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2019-12-25/2.2.4.png&quot; alt=&quot;2.2.4 example&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
The child genotype probability distribution can be computed by splitting parents’ genotype to alleles and combine them pairwise; alleles from same parent will not be recombined together.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;3.1 Constructing New Factors for Decoupled Networks&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The factor to compute is &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(Phenotype, Allele_1, Allele_2)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(Phenotype, Allele_1, Allele_2)&lt;/script&gt; and approach is similar to 2.2.4; this clue should be sufficient to figure out the rest.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;4.2 Constructing Factors with Sigmoid CPDs&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;It would be clearer if we define the Sigmoid CPD as follows:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\hspace{30pt} f(X^1_1, ..., X^1_{n_1}, ..., X^m_{n_m}, Y^1_1, ..., Y^m_{n_m}) = \sum^m_{j=1}\sum^{n_j}_{i=1}w^j_i X^j_i + \sum^m_{j=1}\sum^{n_j}_{i=1}w^j_i Y^j_i&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hspace{30pt} f(X^1_1, ..., X^1_{n_1}, ..., X^m_{n_m}, Y^1_1, ..., Y^m_{n_m}) = \sum^m_{j=1}\sum^{n_j}_{i=1}w^j_i X^j_i + \sum^m_{j=1}\sum^{n_j}_{i=1}w^j_i Y^j_i&lt;/script&gt;

&lt;p&gt;Basically, we simply compute the &lt;strong&gt;&lt;em&gt;sum of weights&lt;/em&gt;&lt;/strong&gt; of alleles existing in the genotype of interest. You can double check this with the provided example.
Hence, once you got this idea, we simply scan through all assigments of genotypes - formed by &lt;strong&gt;&lt;em&gt;4&lt;/em&gt;&lt;/strong&gt; Gene Copies, then compute &lt;code class=&quot;MathJax_Preview&quot;&gt;sigmoid(f(X^1_1, ..., X^1_{n_1}, ..., X^m_{n_m}, Y^1_1, ..., Y^m_{n_m}))&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;sigmoid(f(X^1_1, ..., X^1_{n_1}, ..., X^m_{n_m}, Y^1_1, ..., Y^m_{n_m}))&lt;/script&gt; to fill in the probability distribution.&lt;/p&gt;

&lt;h2 id=&quot;week-3-markov-network-fundamentals&quot;&gt;Week 3: Markov Network Fundamentals&lt;/h2&gt;

&lt;p&gt;Unlike to week 2 where we have &lt;code class=&quot;highlighter-rouge&quot;&gt;sampleGeneticNetworks.m&lt;/code&gt; to test out the implementation, you need to load data structure from &lt;code class=&quot;highlighter-rouge&quot;&gt;.mat&lt;/code&gt; files and compare to the instruction.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;3.1 Pairwise Factors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You don’t need to do any extra computation for all info are stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;pairwiseModel&lt;/code&gt; already and all pairwise factors are defined &lt;strong&gt;&lt;em&gt;exactly the same&lt;/em&gt;&lt;/strong&gt;. Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;pairwiseModel&lt;/code&gt; is a matrix whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;.val&lt;/code&gt; expected to be a 1-dimensional vector!
Once made necesssary change, rebuild the model with&lt;/p&gt;
&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildOCRNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allWords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairwiseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;3.2 Triplet Factors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You need to &lt;strong&gt;&lt;em&gt;explicitly&lt;/em&gt;&lt;/strong&gt; build a table of &lt;code class=&quot;highlighter-rouge&quot;&gt;(K*K*K)&lt;/code&gt; rows storing factors’ values; its &lt;strong&gt;&lt;em&gt;index&lt;/em&gt;&lt;/strong&gt; is corresponding to an &lt;strong&gt;&lt;em&gt;assignment&lt;/em&gt;&lt;/strong&gt; of triplet factors, whose factors’ variables are represented in &lt;strong&gt;&lt;em&gt;numerical value&lt;/em&gt;&lt;/strong&gt; from &lt;code class=&quot;MathJax_Preview&quot;&gt;1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; to &lt;code class=&quot;MathJax_Preview&quot;&gt;26&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;26&lt;/script&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;tripletList&lt;/code&gt; is a factor array with &lt;code class=&quot;MathJax_Preview&quot;&gt;2000&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2000&lt;/script&gt; elements, its fields are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.chars&lt;/code&gt; telling you the assignment of top &lt;code class=&quot;MathJax_Preview&quot;&gt;2000^{th}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2000^{th}&lt;/script&gt; triplet factors. Assume an assignment is &lt;code class=&quot;MathJax_Preview&quot;&gt;[x_1, x_2, x_3]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[x_1, x_2, x_3]&lt;/script&gt;, each such assignment can be converted to table’s index with the formula &lt;code class=&quot;MathJax_Preview&quot;&gt;index = x_1 + (x_2-1)*K + (x_3-1)*K^2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;index = x_1 + (x_2-1)*K + (x_3-1)*K^2&lt;/script&gt;; we can derive such formula because &lt;code class=&quot;highlighter-rouge&quot;&gt;tripletList&lt;/code&gt; is essentially a concise representation of our table.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.factorVal&lt;/code&gt; telling you the corresponding value for each assignment in &lt;code class=&quot;highlighter-rouge&quot;&gt;.chars&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Akin to 3.1, you assign the same table to every triplet factor and rebuild the model with&lt;/p&gt;

&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildOCRNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allWords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairwiseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tripletList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;3.3 Image Similarity Factors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;Compute Similarity Factor&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;code class=&quot;highlighter-rouge&quot;&gt;(K*K)&lt;/code&gt; of character joint assignments in &lt;code class=&quot;MathJax_Preview&quot;&gt;(C_i, C_j)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;(C_i, C_j)&lt;/script&gt; pairs, i.e.  &lt;code class=&quot;MathJax_Preview&quot;&gt;[(1, 1), (1, 2), ..., (26, 26)]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;[(1, 1), (1, 2), ..., (26, 26)]&lt;/script&gt;. We will set the similarity score to &lt;code class=&quot;MathJax_Preview&quot;&gt;1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; for all but &lt;code class=&quot;highlighter-rouge&quot;&gt;K&lt;/code&gt; pairs that having &lt;code class=&quot;MathJax_Preview&quot;&gt;C_i = C_j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;C_i = C_j&lt;/script&gt; to &lt;code class=&quot;MathJax_Preview&quot;&gt;ImageSimilarity(I_i, I_j)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;ImageSimilarity(I_i, I_j)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;Compute All Similarity Factor&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Readers can figure out how &lt;code class=&quot;highlighter-rouge&quot;&gt;factors&lt;/code&gt; is constructed and organized based on &lt;code class=&quot;highlighter-rouge&quot;&gt;nFactors&lt;/code&gt;.
Once all required steps are made, you can rebuild the model. It takes 5 minutes plus per run.&lt;/p&gt;

&lt;div class=&quot;language-matlab highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;imageModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignoreSimilarity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;factors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BuildOCRNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allWords&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pairwiseModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tripletList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;week-4-decision-theory&quot;&gt;Week 4: Decision Theory&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I have faced road block in this last PA - all the local tests are passed but failed after submitting it online, hence I cannot proceed further. The guideline below reflects my understanding and could be wrong since I don’t have actual result validating it. You can check out this &lt;a href=&quot;https://www.coursera.org/learn/probabilistic-graphical-models/discussions/weeks/4/threads/s7yEUEG9EeezGhJSvzqk_g&quot;&gt;useful guideline&lt;/a&gt; as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Variable Elimination&lt;/em&gt; is a useful technique that was not fully explained in the PA, yet your life would be way easier knowing it. In short, this is a Factor Marginalization. Given a factor &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(D)&lt;/script&gt; having its variable set &lt;code class=&quot;MathJax_Preview&quot;&gt;D = X \cup Y&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D = X \cup Y&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;X=\{X_1, X_2, ..., X_m\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X=\{X_1, X_2, ..., X_m\}&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;Y=\{Y_1, Y_2, ..., Y_n\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Y=\{Y_1, Y_2, ..., Y_n\}&lt;/script&gt;. If we want to reduce set of variables of &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; from &lt;code class=&quot;MathJax_Preview&quot;&gt;D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; to &lt;code class=&quot;MathJax_Preview&quot;&gt;Y&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, it could be performed as follows:&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt} \phi(Y) = VariableElimination(\phi(D), X) = \sum_{X' \in P_{a_X}} \phi(X', Y)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt} \phi(Y) = VariableElimination(\phi(D), X) = \sum_{X' \in P_{a_X}} \phi(X', Y)&lt;/script&gt; &lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt}&lt;/script&gt; with &lt;code class=&quot;MathJax_Preview&quot;&gt;P_{a_X}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;P_{a_X}&lt;/script&gt; is all joint assignments of variables in &lt;code class=&quot;MathJax_Preview&quot;&gt;X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;There are 2 observations derived from this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\mid D \mid \geq 2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\mid D \mid \geq 2&lt;/script&gt;: the original variable set &lt;code class=&quot;MathJax_Preview&quot;&gt;D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; must have at least &lt;code class=&quot;MathJax_Preview&quot;&gt;2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2&lt;/script&gt; elements.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\mid Y \mid \geq 1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\mid Y \mid \geq 1&lt;/script&gt;: the variable set after the reduction must not be an empty set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The equivalence of &lt;code class=&quot;MathJax_Preview&quot;&gt;X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;VariableElimination&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;Z&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: Makes no assumption about &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(D)&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(O)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(O)&lt;/script&gt;, it could be from any &lt;code class=&quot;MathJax_Preview&quot;&gt;X_i \in X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X_i \in X&lt;/script&gt;. Check out &lt;code class=&quot;highlighter-rouge&quot;&gt;TestCases.m&lt;/code&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;4. Calculating Expected Utility Given A Decision Rule&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The instruction is actually clear, but you need to find the correct piece to complete the puzzle. Let’s reformulate it first:&lt;/p&gt;

&lt;p&gt;Given a Bayesian network &lt;code class=&quot;MathJax_Preview&quot;&gt;I&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;I&lt;/script&gt; with variable set &lt;code class=&quot;MathJax_Preview&quot;&gt;X = \{X_1, X_2,... X_n\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X = \{X_1, X_2,... X_n\}&lt;/script&gt;, a decision node &lt;code class=&quot;MathJax_Preview&quot;&gt;D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt; whose &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(D) = T \subseteq X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(D) = T \subseteq X&lt;/script&gt;, an outcome node &lt;code class=&quot;MathJax_Preview&quot;&gt;O \subset X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O \subset X&lt;/script&gt;, an utility node &lt;code class=&quot;MathJax_Preview&quot;&gt;U&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;U&lt;/script&gt; whose &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(U) = O \cup D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(U) = O \cup D&lt;/script&gt;, let’s compute&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt} \mathop{\mathbb{E}}_{I}(U) = \sum_{A \in P_{a_{Parent(U)}}} \phi(A) U(A)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt} \mathop{\mathbb{E}}_{I}(U) = \sum_{A \in P_{a_{Parent(U)}}} \phi(A) U(A)&lt;/script&gt; &lt;br /&gt; 
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt}&lt;/script&gt; with &lt;code class=&quot;MathJax_Preview&quot;&gt;P_{a_{Parent(U)}}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;P_{a_{Parent(U)}}&lt;/script&gt; is all joint assignments of &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(U) = O \cup D&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(U) = O \cup D&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;We already have &lt;code class=&quot;MathJax_Preview&quot;&gt;U(A)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;U(A)&lt;/script&gt;, so the missing factor is &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(A)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(A)&lt;/script&gt;, which is in fact &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(Parent(U)) = \phi(O \cup D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(Parent(U)) = \phi(O \cup D)&lt;/script&gt;. We can compute this single factor by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Apply Factor Product on provided &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(X_i, Parent(X_i)), i \in \mathbb{Z}: i \in [1;n]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(X_i, Parent(X_i)), i \in \mathbb{Z}: i \in [1;n]&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(D, Parent(D))&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(D, Parent(D))&lt;/script&gt; to obtain &lt;strong&gt;&lt;em&gt;the single factor&lt;/em&gt;&lt;/strong&gt; &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(X, D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(X, D)&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Apply Variable Elimination to obtain &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi(Parent(U)) = \phi(O \cup D)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi(Parent(U)) = \phi(O \cup D)&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Compute &lt;code class=&quot;MathJax_Preview&quot;&gt;\mathop{\mathbb{E}}_I(U)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\mathop{\mathbb{E}}_I(U)&lt;/script&gt; by scanning through each assignment of &lt;code class=&quot;MathJax_Preview&quot;&gt;Parent(U)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Parent(U)&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;6. Maximum Expected Utility With Expected Utility Factors&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;CalculateExpectedUtilityFactors.m&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The new formulation is&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\hspace{40pt} \mathop{\mathbb{E}}_{I}(D, Parent(D)) = \sum_{A \in P_{a_{D, Parent(D)}}} \phi(A) \left [ \sum_{B \in P_{a_{Parent(U)}}} U(A, B) \right ]&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hspace{40pt} \mathop{\mathbb{E}}_{I}(D, Parent(D)) = \sum_{A \in P_{a_{D, Parent(D)}}} \phi(A) \left [ \sum_{B \in P_{a_{Parent(U)}}} U(A, B) \right ]&lt;/script&gt;

&lt;p&gt;and you can follow the same approach in 4.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;OptimizeMEU&lt;/span&gt;&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\hspace{40pt} d^* = argmax_{d \in D} \mathop{\mathbb{E}}_{I} (d, Parent(d))&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hspace{40pt} d^* = argmax_{d \in D} \mathop{\mathbb{E}}_{I} (d, Parent(d))&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;7.1 Joint Utility Factors&lt;/span&gt;&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{40pt} d^* = argmax_{d \in D} \left [ \sum_{I' \in OutcomeNet(I)} \mathop{\mathbb{E}}_{I'}(d, Parent(d)) \right ]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{40pt} d^* = argmax_{d \in D} \left [ \sum_{I' \in OutcomeNet(I)} \mathop{\mathbb{E}}_{I'}(d, Parent(d)) \right ]&lt;/script&gt;  &lt;br /&gt;
with &lt;code class=&quot;MathJax_Preview&quot;&gt;OutcomeNet(I) = \{ I&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;OutcomeNet(I) = \{ I&lt;/script&gt; removes all &lt;code class=&quot;MathJax_Preview&quot;&gt;O_j \in O; O_j \neq O_i \mid \forall O_i \in O \}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O_j \in O; O_j \neq O_i \mid \forall O_i \in O \}&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;O=\{O_1, O_2, ..., O_k\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O=\{O_1, O_2, ..., O_k\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold;&quot;&gt;7.2 Linearity of Expectations&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The formulation is the same, but implementation is different:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Compute factor &lt;code class=&quot;MathJax_Preview&quot;&gt;O_i = \mathop{\mathbb{E}}_{I'}  (d, Parent(d)) , \forall I' \in OutcomeNet(I), \forall O_i \in O&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O_i = \mathop{\mathbb{E}}_{I'}  (d, Parent(d)) , \forall I' \in OutcomeNet(I), \forall O_i \in O&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Set &lt;code class=&quot;MathJax_Preview&quot;&gt;O_i = VariableElimination(O_i, K_i), K_i = \{&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O_i = VariableElimination(O_i, K_i), K_i = \{&lt;/script&gt; complementary set between variables of &lt;code class=&quot;MathJax_Preview&quot;&gt;O_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O_i&lt;/script&gt; and decision node &lt;code class=&quot;MathJax_Preview&quot;&gt;D \}, \forall O_i \in O&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;D \}, \forall O_i \in O&lt;/script&gt;. Now &lt;code class=&quot;MathJax_Preview&quot;&gt;O_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;O_i&lt;/script&gt;’s variable set would be &lt;code class=&quot;MathJax_Preview&quot;&gt;\{ Parent(U) \cup D \}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\{ Parent(U) \cup D \}&lt;/script&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\hspace{40pt} d^* = argmax_{d \in D} \left [ \sum_{A \in P_{a_{Parent(U)}}} O_i(A, d) \right ]&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\hspace{40pt} d^* = argmax_{d \in D} \left [ \sum_{A \in P_{a_{Parent(U)}}} O_i(A, d) \right ]&lt;/script&gt;

&lt;p&gt;That’s it, folks! Kudos to any of you made it to this line. It would be great to have your feedback to improve this guideline and help other learners to complete this challenging course 😊.&lt;/p&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Disclaimer: The content of this post is to facililate the learning process without sharing any solution, hence this does not violate the Coursera Honor Code.</summary></entry><entry><title type="html">Information Theory A Tutorial Introduction – James V Stone</title><link href="http://localhost:4000/blog/2018-06-17-bookreview-information-theory/" rel="alternate" type="text/html" title="Information Theory A Tutorial Introduction – James V Stone" /><published>2018-06-17T00:00:00+08:00</published><updated>2018-06-17T00:00:00+08:00</updated><id>http://localhost:4000/blog/bookreview-information-theory</id><content type="html" xml:base="http://localhost:4000/blog/2018-06-17-bookreview-information-theory/">&lt;p&gt;Our hero, Shrek, was just one step away from saving princess Fiona and getting his beloved swamp back.  However, the gate to the highest tower in the castle, where the princess was imprisoned, was guarded by a mighty Dragon. Fortunately, considered herself as an intellectual, Dragon refuses a battle of life and death, instead, she gave Shrek a puzzle to solve in order to pass through the door. It is as follows:&lt;/p&gt;

&lt;p&gt;Given a 4×4 square &lt;strong&gt;(a)&lt;/strong&gt; as below and a palette of 4 different colours represented as 4 different digits, can you produce the shortest sequence of digits such that I can perfectly reconstruct the square from?&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2018-06-17/example.jpg&quot; alt=&quot;Example 1&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
With coloured box is encoded as a digit, can you encode the 4x4 square (&lt;strong&gt;a&lt;/strong&gt; or &lt;strong&gt;b&lt;/strong&gt;) as a sequence of digits such that it is the shortest and one can easily reconstruct the square from perfectly?.&lt;/p&gt;

&lt;p&gt;At first glance, a natural solution would be &lt;em&gt;‘1111 2222 3333 4444′&lt;/em&gt; to list out the value of each cell from left to right, top to bottom. After pondering for a while, Shrek came up with a more brilliant idea, which first named the value colour then followed by its frequency, in the same ordering. Simply put, the sequence now was &lt;em&gt;‘14 24 34 44‘&lt;/em&gt;. Nodded her head pleasantly, Dragon stepped asides and allowed Shrek to pass through…&lt;/p&gt;

&lt;p&gt;Actually, on the previous day, Dragon asked another knight a similar question, but with the square (&lt;strong&gt;b&lt;/strong&gt;), and obviously he had failed. Shrek’s solution in that case is worse than the first solution(&lt;em&gt;‘11213141 21314111 31411121 41112131‘&lt;/em&gt;), and it is a bit trickier to solve.&lt;/p&gt;

&lt;p&gt;The above puzzle gives us an interesting observation: both squares have the same number of red, orange, green and purple boxes, yet their corresponding shortest sequences are represented differently. In other words, with a same amount of information, how could they not be represented as the same length? Does there exist an optimal encoding scheme for both cases?&lt;/p&gt;

&lt;p&gt;It turns out, information can be quantified to justify whether a representation is optimally encoded(represented) or not. &lt;a href=&quot;https://www.amazon.com/Information-Theory-Introduction-James-Stone/dp/0956372856/ref=sr_1_sc_1?ie=UTF8&amp;amp;qid=1529146794&amp;amp;sr=8-1-spell&amp;amp;keywords=information+theory+james+vstone&quot;&gt;Information Theory A Tutorial Introduction – James V Stone&lt;/a&gt; captures such question and beyond. This post is an attempt to provide a big picture of what the book covers.&lt;/p&gt;

&lt;p&gt;Information is measured in &lt;em&gt;bits&lt;/em&gt; or &lt;em&gt;Shannon information&lt;/em&gt;, with one &lt;em&gt;bit&lt;/em&gt; is the amount of information to choose between two equally probable alternatives. In other words, if one has n bits of information, she can choose from &lt;code class=&quot;MathJax_Preview&quot;&gt;m = 2^n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;m = 2^n&lt;/script&gt; equally probable alternatives. This implies a strong implication. since with only 20 bits, you can represent 1 048 576 events. It’s noteworthy to mention this only holds so long as all the events are equally probable.&lt;/p&gt;

&lt;p&gt;Each bit has only two states, hence can be encoded as boolean value True and False; or &lt;em&gt;binary digits&lt;/em&gt; 0 and 1. People tend to use bit in binary digit and bit in information interchangeably, though it is true in most case, one should be wary of the distinction. The former must always be an integer, whereas the latter can be real, or even negative in the continuous random variable case.&lt;/p&gt;

&lt;p&gt;A typical framework of information theory is the &lt;em&gt;communication channel&lt;/em&gt;, where the terms are coined accordingly, to formulate the conservation of information in the lossless and lossy environment. Such formulation is chosen to frame other related tasks, for instance Statistical Machine Translation with input is sentence in English and output is the French counterpart. Formally, a &lt;em&gt;source&lt;/em&gt; generates &lt;em&gt;message&lt;/em&gt; &lt;strong&gt;s&lt;/strong&gt; containing k &lt;em&gt;symbols&lt;/em&gt;. Prior to be put to the &lt;em&gt;input channel&lt;/em&gt;, we encode the message to a sequence of &lt;em&gt;code words&lt;/em&gt; based on a &lt;em&gt;code book&lt;/em&gt;, a 1-to-1 mapping function. Throughout the channel, there may be &lt;em&gt;noise&lt;/em&gt; injected to the sequence, hence the reconstruction process of the original value of message &lt;strong&gt;s&lt;/strong&gt; is error-prone. Notably, the channel always has a predetermined capacity, which is the maximum amount of information (bit per code word) can go through in a time unit.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2018-06-17/communication_channel.jpg&quot; alt=&quot;Communication Channel&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
Communication channel, based on Figure 2.3, page 26 of the book..&lt;/p&gt;

&lt;p&gt;To analyse this framework, there are 2 primary perspectives: the random variable nature (symbols in the message) and the transmission process nature (lossless or lossy environment, caused by the presence of noise).&lt;/p&gt;

&lt;p&gt;First, a discrete random variable has a finite number of possible values, and its information is quantified in terms of &lt;em&gt;entropy&lt;/em&gt;, the average of surprisal of that variable, i.e. expected logarithm of 1 over probability of the value. This quantity reaches it maximum when all the values are equally probable, which coincides with the definition of bit. Alternatively, the &lt;em&gt;uncertainty&lt;/em&gt; has similar interpretation, e.g. the more probable a value to occur, the less surprised it is; hence the gap between the entropy of the data after and before going through the channel is called &lt;em&gt;information gain&lt;/em&gt; or &lt;em&gt;mutual information&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, it is nontrivial to measure entropy of a continuous random variable, in case of temperature or wave in radio transmission. One way is discretising the value range to finite bins, but as the grainier the number of bins is, the entropy converses to infinity, which is meaningless. Similarly, a differential entropy suffers the same disadvantage, thus one way is cutting off the term causing infinity and use the rest as  approximation. Fortunately, we usually care more about the mutual information, which is the gap between two entropies, hence the annoying terms automatically cancel out each other and no approximation loss incurs.&lt;/p&gt;

&lt;p&gt;Second, a noiseless channel can fully utilise the channel capacity for efficient encoding, whereas a noisy one must spare some space for error-correcting code to detect and fix fautly transmitted code words. Any remainder amount after subtracting two entropies of input and output, together with the mutual information, is the amount of noise in the channel.&lt;/p&gt;

&lt;p&gt;In real life application, it is essential to know the channel capacity, since it tells us how an encoding scheme can best perform with respect to the random variable under consideration. It gives us a hint how far we can make, but provides no guidance how to achieve. In the ideal case, a fair 8-sided die encodes its value in 3 binary digits to transmit would achieve this. However, natural distribution is often not independent and uniform to have equally probable value, consequently overestimating its entropy and channel capacity. To avoid that, we must ensure or transform the distribution of random variable to be &lt;em&gt;independent and identically distributed&lt;/em&gt;. Once such requirement obtained, proposed encoding schemes (e.g. Huffman coding) would have the best coding efficiency, or shortest sequence to represent the square in the puzzle at the beginning.&lt;/p&gt;

&lt;p&gt;Taking words in a document as the discrete random variable. The presence of the phrase “the cat and” entails a high probability of a noun follows, hence does not meet the independence conditional. One can force this by instead word, choose phrase of n-words as random variable. It has been shown with a 10-word phrase, they are nearly independent and have entropy converge to the channel capacity.&lt;/p&gt;

&lt;p&gt;The continuous variable is more challenging, since it has infinite values. Fortunately, there are rules of thump to handle this, according to the information we have of the underlying distribution. For instance, if the variable has both the upper and lower bounds, uniform distribution is the best encoding scheme. The remaining question is, how can one transform an arbitrary distribution to the optimal one. The book will help you answer this.&lt;/p&gt;

&lt;p&gt;As one last side note, from the Machine Learning’s point of view, the mutual information plays an important role. For two given variables, mutual information can tell how strong their correlation are, despite whether it is a linear or nonlinear relationship, which is way more helpful than the correlation coefficient widely used. Furthermore, the mutual information between variable &lt;code class=&quot;MathJax_Preview&quot;&gt;X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;Y&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;, when expressed in terms of Bayes’ rule,  is in fact the expected Kullback-Leiber divergence between the posterior, &lt;code class=&quot;MathJax_Preview&quot;&gt;p(X \vert Y)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(X \vert Y)&lt;/script&gt;, and prior, &lt;code class=&quot;MathJax_Preview&quot;&gt;p(X)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(X)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The book will cover more details of what I have explained here, including the different properties of disrete and continuous random variable in terms of entropy, formulation analysis of entropy in both cases, and interpretations of natural phenomena from Information Theorey perspective. Personally, this is a good introductory book and it satisfies my initial motivation in looking for Information Theory’s connection to Machine Learning.&lt;/p&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Our hero, Shrek, was just one step away from saving princess Fiona and getting his beloved swamp back. However, the gate to the highest tower in the castle, where the princess was imprisoned, was guarded by a mighty Dragon. Fortunately, considered herself as an intellectual, Dragon refuses a battle of life and death, instead, she gave Shrek a puzzle to solve in order to pass through the door. It is as follows:</summary></entry><entry><title type="html">Linear programming - A powerful problem solving method that works effectively in practice but is provably hard in principle</title><link href="http://localhost:4000/blog/2018-05-22-linear-programming/" rel="alternate" type="text/html" title="Linear programming - A powerful problem solving method that works effectively in practice but is provably hard in principle" /><published>2018-05-22T00:00:00+08:00</published><updated>2018-05-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/linear-programming</id><content type="html" xml:base="http://localhost:4000/blog/2018-05-22-linear-programming/">&lt;p&gt;There was a time, scientists had to predict nature with pure reasoning and looked for affirmative from observations. There was a time, practitioners could barely scan through all the possible solutions to analyse the correctness of a problem, and thus had to ask for help from mathematicians. And, there was a time, when mathematics listed a method as hard to solve (in terms of polynomial time) in principle then it came out to be a good fit in practice. Among those, there is Linear Programming (LP).&lt;/p&gt;

&lt;p&gt;This post will give you a brief overview of how LP works, suggest several useful solvers,  and assuredly to make you comfortable enough to use them, though it took, to say the least, some efforts to adapt it to your own problem. In other words, this is an introduction from engineering’s point of view. Audiences who are interested in its underlying principle could easily look up for plenty helpful blog posts or Optimization-related textbook.&lt;/p&gt;

&lt;h2 id=&quot;formulation&quot;&gt;Formulation&lt;/h2&gt;
&lt;p&gt;LP is an optimization method, in which given a set of variables together with an objective function, can help us to find the optimal combination of values of this set, with respect to some constraints on its domain.&lt;/p&gt;

&lt;p&gt;More formally, given a vector of variables &lt;code class=&quot;MathJax_Preview&quot;&gt;x = (x_1, x_2, x_3)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x = (x_1, x_2, x_3)&lt;/script&gt;, 2 vectors &lt;code class=&quot;MathJax_Preview&quot;&gt;c&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt;,  &lt;code class=&quot;MathJax_Preview&quot;&gt;b&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; and a matrix &lt;code class=&quot;MathJax_Preview&quot;&gt;A&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt; of fixed values, &lt;code class=&quot;MathJax_Preview&quot;&gt;c^{\intercal}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;c^{\intercal}&lt;/script&gt; is the transpose of c, we can express our problem [1] as&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;maximize &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{35pt}c^{\intercal}x&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{35pt}c^{\intercal}x&lt;/script&gt; &lt;br /&gt; subject to &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{30pt}Ax \leq b&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{30pt}Ax \leq b&lt;/script&gt; &lt;br /&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{60pt}x \geq 0&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{60pt}x \geq 0&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Simply put, so long as you can formulate any problem in this particular form, then it is &lt;em&gt;likely&lt;/em&gt; to be solved. The LP solver has the ability to identify a non-solvable problem, no possible values of &lt;code class=&quot;MathJax_Preview&quot;&gt;x&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; satisfy the constraints, so the term &lt;em&gt;likely&lt;/em&gt; here refers to the running time.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; font-style: italic;&quot;&gt;Example 1&lt;/span&gt;: Given a bag of coins, if I allow you to take at most 40 coins, how can you maximize the total values of the selected coin. You know that there are 3 types of coins: Galleon ($6.64), Sickle ($0.39), and Knut ($0.01)[2], and you could not take more than 20 Galleons, 10 Sickles but there is no limitation on Knut. Let’s call the number of the coins in decreasing order of value as &lt;code class=&quot;MathJax_Preview&quot;&gt;g&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;s&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;k&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;k&lt;/script&gt;, the formulation is as follows&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;maximize: &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{16pt}6.64 \cdot g + 0.39 \cdot s + 0.01 \cdot k&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{16pt}6.64 \cdot g + 0.39 \cdot s + 0.01 \cdot k&lt;/script&gt; &lt;br /&gt; subject to &lt;br /&gt; 
&lt;code class=&quot;MathJax_Preview&quot;&gt;\begin{aligned}
  \hspace{60pt} g &amp;amp;\leq 20 \\[0.5em]
  \hspace{60pt} s &amp;amp;\leq 10
\end{aligned}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{aligned}
  \hspace{60pt} g &amp;\leq 20 \\[0.5em]
  \hspace{60pt} s &amp;\leq 10
\end{aligned} %]]&gt;&lt;/script&gt;
&lt;br /&gt; and &lt;br /&gt;
&lt;code class=&quot;MathJax_Preview&quot;&gt;\begin{aligned}
  \hspace{60pt} g \geq 0 \\[0.5em]
  \hspace{60pt} s \geq 0 \\[0.5em]
  \hspace{60pt} k \geq 0
\end{aligned}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\begin{aligned}
  \hspace{60pt} g \geq 0 \\[0.5em]
  \hspace{60pt} s \geq 0 \\[0.5em]
  \hspace{60pt} k \geq 0
\end{aligned}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;One does not need to sketch on paper to know that the optimal solution is &lt;code class=&quot;MathJax_Preview&quot;&gt;(g, s, k) = (20, 10, 10)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;(g, s, k) = (20, 10, 10)&lt;/script&gt;. However, this example serves the purpose to familiarize you with the formulating process rather than demonstrate the capacity of this method.&lt;/p&gt;

&lt;p&gt;Note that, all variables must be first order to remain the linearity, in other words, can only be &lt;code class=&quot;MathJax_Preview&quot;&gt;g&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;g&lt;/script&gt;, not &lt;code class=&quot;MathJax_Preview&quot;&gt;g^2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;g^2&lt;/script&gt;, &lt;code class=&quot;MathJax_Preview&quot;&gt;g^3&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;g^3&lt;/script&gt;, or higher order.&lt;/p&gt;

&lt;p&gt;When I first come across this method, instantly do I look for a connection to Machine Learning, since essentially it is an optimization problem. To who may not be familiar with Machine Learning, this is a field that studies the pattern of data. Provided a data point and its corresponding label (an image of a cat and the label says “Cat”, for instance), we need to find a model that automatically learns the mapping from data to its true label. This task is called classification. Admittedly, this is an oversimplified explanation, but it does suffice for the following example.&lt;/p&gt;

&lt;p&gt;Intuitively, for the classification task, we need to minimize the loss function, which is the number of misclassified data points. However, what are the variables we need to solve? It turns out a bit tricky to actually formulate into the standard format.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight:bold; font-style: italic;&quot;&gt;Example 2&lt;/span&gt;: Given a set of &lt;code class=&quot;MathJax_Preview&quot;&gt;n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; 2-dimension data points &lt;code class=&quot;MathJax_Preview&quot;&gt;X = \{(x_{11}, x_{12}), (x_{21}, x_{22}), ..., (x_{n1}, x_{n2})\}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X = \{(x_{11}, x_{12}), (x_{21}, x_{22}), ..., (x_{n1}, x_{n2})\}&lt;/script&gt; and the set of corresponding binary labels &lt;code class=&quot;MathJax_Preview&quot;&gt;Y = \{-1, 1\}^n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;Y = \{-1, 1\}^n&lt;/script&gt;, find the weight vector w that correctly classified every element of &lt;code class=&quot;MathJax_Preview&quot;&gt;X&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;, i.e. &lt;code class=&quot;MathJax_Preview&quot;&gt;sign ( w^{\intercal} x_{i} \cdot y_i ) = 1 \cdot sign ( x )&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;sign ( w^{\intercal} x_{i} \cdot y_i ) = 1 \cdot sign ( x )&lt;/script&gt; is 1 if the sign of x is positive and -1 otherwise, for any data point &lt;code class=&quot;MathJax_Preview&quot;&gt;x_i = (x_{i1}, x_{i2})&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x_i = (x_{i1}, x_{i2})&lt;/script&gt;. The formulation is&lt;/p&gt;

&lt;p class=&quot;message&quot;&gt;maximize &lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{60pt} \sum_{i \in [1, n]} sign ( w^{\intercal} x_{i} \cdot y_{i} )&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{60pt} \sum_{i \in [1, n]} sign ( w^{\intercal} x_{i} \cdot y_{i} )&lt;/script&gt; &lt;br /&gt; subject to
&lt;code class=&quot;MathJax_Preview&quot;&gt;\hspace{60pt}w_1, w_2 \in \mathbb{R}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\hspace{60pt}w_1, w_2 \in \mathbb{R}&lt;/script&gt; (or no constraint)&lt;/p&gt;

&lt;p&gt;This might look confusing at first glance, but let me break it down bit by bit. Basically, we assume that the data points have 2 classes, &lt;code class=&quot;MathJax_Preview&quot;&gt;-1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;, and there is a line that can separate them. The target line, or variables that need to be optimized, is in fact &lt;code class=&quot;MathJax_Preview&quot;&gt;w&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;, with &lt;code class=&quot;MathJax_Preview&quot;&gt;w^{\intercal} x_{i}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w^{\intercal} x_{i}&lt;/script&gt; is the prediction. Any point that lies above or on the line, &lt;code class=&quot;MathJax_Preview&quot;&gt;w^{\intercal} x_{i} \geq 0&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w^{\intercal} x_{i} \geq 0&lt;/script&gt;, have predicted label as &lt;code class=&quot;MathJax_Preview&quot;&gt;1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;. Likewise, any point that lies below having &lt;code class=&quot;MathJax_Preview&quot;&gt;w^{\intercal} x_{i} &amp;lt; 0&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
w^{\intercal} x_{i} &lt; 0 %]]&gt;&lt;/script&gt;,  or predicted label as &lt;code class=&quot;MathJax_Preview&quot;&gt;-1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;-1&lt;/script&gt;. From this observation, if we correctly classify a point, the multiplication of the actual value and prediction will always be a positive value, which has &lt;code class=&quot;MathJax_Preview&quot;&gt;sign ( w^{\intercal} x_{i} ) = 1&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;sign ( w^{\intercal} x_{i} ) = 1&lt;/script&gt;. There is no constraint on the value of &lt;code class=&quot;MathJax_Preview&quot;&gt;w&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;, hence we complete the formulation.&lt;/p&gt;

&lt;p&gt;The point of this example is showing that it takes some analysis to deduce the appropriate form of LP. Later on, when learning of Support Vector Machine, I realize that this idea has been exploited already!!! Additionally, they modify elegantly to handle even the nonlinear separable data.&lt;/p&gt;

&lt;h2 id=&quot;linear-programming-solvers&quot;&gt;Linear Programming Solvers&lt;/h2&gt;

&lt;p&gt;Okay, I now know how to formulate my problem, but how exactly do I solve them? Fortunately, there are plenty solvers out there can do the work once you feed them the formulation. For students, I recommend Gurobi, since it is commercial hence a good solver but also provides a free academic license. Other choices would be CPLEX, GLPK or standard library on your prefered programming language (MATLAB, Python).&lt;/p&gt;

&lt;h3 id=&quot;gurobi&quot;&gt;Gurobi&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Website: http://www.gurobi.com/&lt;/li&gt;
  &lt;li&gt;Gurobi downloaded package provides mini problem sets in each programming language to help user get accustomed to.&lt;/li&gt;
  &lt;li&gt;Gurobi has API for most common-used languages: C, Java, Python, MATLAB…. Besides, it is possible to use as a software as well. In fact, first test out Gurobi with the software before proceeding to use API is a good idea. Try with Mip1 problem set.&lt;/li&gt;
  &lt;li&gt;All required information of installation and uses are &lt;a href=&quot;http://www.gurobi.com/documentation/7.5/quickstart_mac.pdf&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Issues can meet when installing on Window: &lt;a href=&quot;https://www.urtech.ca/2014/12/solved-installation-error-code-2502-2503/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.urtech.ca/2016/02/solved-how-to-fix-error-2503-2502-on-windows-10-when-installing-software/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Window is easier to install than Ubuntu. However, when running on a server, usually there is no choice other than Ubuntu. A helpful referent &lt;a href=&quot;http://abelsiqueira.github.io/blog/installing-gurobi-7-on-linux//&quot;&gt;blog&lt;/a&gt; of Abel. A few notes:
    &lt;ul&gt;
      &lt;li&gt;remember to check if &lt;em&gt;grbgetkey&lt;/em&gt; file is executable or not:
        &lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;chmod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file_name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;check if a file is hidden or key file in hidden folder.&lt;/li&gt;
      &lt;li&gt;when I use Java to compile (command javac, java), you need to link to Gurobi folder. You can save this path to &lt;em&gt;bashrc&lt;/em&gt; file. All declared path must be direct to folders, should not use relative path name like ~. A helpful &lt;a href=&quot;https://groups.google.com/forum/#!topic/gurobi/eTtUNAw8Ed8&quot;&gt;thread&lt;/a&gt;.
        &lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vinh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gurobi752&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linux64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Set &lt;a href=&quot;http://www.gurobi.com/documentation/6.5/refman/parameters.html&quot;&gt;parameters&lt;/a&gt; for Gurobi &lt;a href=&quot;http://www.gurobi.com/documentation/7.0/refman/java_parameter_examples.html#JavaParameterExamples&quot;&gt;here&lt;/a&gt;, though is is optimized by default.&lt;/li&gt;
  &lt;li&gt;If you install Gurobi with an academic license properly, you must have the following line printed out every time you call the library:
    &lt;div class=&quot;language-s highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Academic&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commercial&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-solvers&quot;&gt;Other Solvers&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/glpk/&quot;&gt;GLPK&lt;/a&gt;. All credit on the GLPK &lt;a href=&quot;https://drive.google.com/drive/folders/1CIRzhYz5nh37BWiprCZW1sB4LKhfSIW0&quot;&gt;tutorial&lt;/a&gt; goes to Mithun Chakraborty.&lt;/li&gt;
  &lt;li&gt;Python: &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html&quot;&gt;scipy.optimize.linprog&lt;/a&gt;. Quite limited in terms of solvability.&lt;/li&gt;
  &lt;li&gt;PuLP: a helpful series of &lt;a href=&quot;http://benalexkeen.com/linear-programming-with-python-and-pulp/&quot;&gt;blog posts&lt;/a&gt; written by Ben Keen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As stated previously, this post is for engineers, developers etc. who seek for a solution for their problem that matches the class of Linear Programming. It is noteworthy that at first, it might not cross your mind that they have any similarity, but the ability to formulate a problem is itself an art in my opinion. Next time, if you have an optimization problem, try this 😉.&lt;/p&gt;

&lt;p&gt;Hopefully, you find this post useful in some ways. Please feel free to make any suggestion on this post or share your opinion on the pros and cons of solvers you have tried.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt; 
  &lt;li&gt;https://en.wikipedia.org/wiki/Linear_programming&lt;/li&gt;
  &lt;li&gt;http://harrypotter.wikia.com/wiki/Wizarding_currency&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">There was a time, scientists had to predict nature with pure reasoning and looked for affirmative from observations. There was a time, practitioners could barely scan through all the possible solutions to analyse the correctness of a problem, and thus had to ask for help from mathematicians. And, there was a time, when mathematics listed a method as hard to solve (in terms of polynomial time) in principle then it came out to be a good fit in practice. Among those, there is Linear Programming (LP).</summary></entry><entry><title type="html">Craig Federighi did not lie about FaceID and its face detection accuracy</title><link href="http://localhost:4000/blog/2017-09-15-craig-federighi/" rel="alternate" type="text/html" title="Craig Federighi did not lie about FaceID and its face detection accuracy" /><published>2017-09-15T00:00:00+08:00</published><updated>2017-09-15T00:00:00+08:00</updated><id>http://localhost:4000/blog/craig-federighi</id><content type="html" xml:base="http://localhost:4000/blog/2017-09-15-craig-federighi/">&lt;p&gt;After September 12 Apple-event, the news of the new iPhone X and its cutting-edge facial recognition technology, namely FaceID, run all over the place. Besides a big leap in price in mobile-market making people suddenly be aware of their internal organ value, an inevitable question pops up about the reliability of FaceID. On one hand, it’s totally convenient to look at the screen and the phone automatically unlocks itself. On the other hand, such kind of privacy protection was proved to be imprecise from time to time and could be faked by a whole bunch of simple (or not) tricks: a photo of the owner, her video, or even a 3D model.&lt;/p&gt;

&lt;p&gt;Things went crazier right after “Apple claims that Face ID is incredibly accurate and secure, and states that there’s a 1 in 1,000,000 chance of a passer-by on the street gaining access, compared to 1 in 50,000 with Touch ID”[1], Craig Federighi’s demo did not go as planned when he failed to unlock his own phone[2].  As usual, the media never misses a chance to twist the trust, mislead people to a so-called “true” fact. Technically, Craig didn’t lie, even if FaceID actually did not recognize him.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2017-09-15/batman_rocky.jpg&quot; alt=&quot;Batman Rocky&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
Source: https://9gag.com/&lt;/p&gt;

&lt;p&gt;As a scientist, I feel my responsibility to unveil the truth behind this with a simple tool, Confusion Matrix. Before getting your hands dirty, I want to make a statement: there is no &lt;strong&gt;contradiction&lt;/strong&gt; between [1] and [2], hence what Craig did should not be an appropriate approximation of the &lt;strong&gt;true error&lt;/strong&gt; of  FaceID. To be clearer, I want to put security matter all aside, and just focus on the claim [1], merely about accuracy/error.&lt;/p&gt;

&lt;p&gt;To address this problem, the aforementioned terms should be more well-defined. Take the FaceID, for instance, it must decide the one facing the screen is its one-and-only owner or not. In this context, accuracy means it (a) correctly recognize its owner and (d) correctly detect strangers as well. On the contrary, the error means it (c) mistakes owner as strangers and (b) mistakes strangers as owner. At this point, [1] clearly implies (b), whereas [2] implies (c). In other words, they are two separate sets such that intersection is an empty set. Their union would be the total error of FaceID.&lt;/p&gt;

&lt;p&gt;A more general and formal definition could be represented by Confusion Matrix. This is a &lt;code class=&quot;MathJax_Preview&quot;&gt;n \times n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;n \times n&lt;/script&gt; matrix, such that &lt;code class=&quot;MathJax_Preview&quot;&gt;n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; is the number of options a classifier (an algorithm which has an ability to make a decision/prediction) can choose. The simplest form would be a &lt;code class=&quot;MathJax_Preview&quot;&gt;2 \times 2&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;2 \times 2&lt;/script&gt; matrix, that is classifying an object into type A or B, OR, detect an object is whether it belongs to type A or not. Apparently, FaceID falls into the second scenario.&lt;/p&gt;

&lt;p&gt;Now, in order to construct this matrix, each column is corresponding to the ground truth and each row is the decision/prediction made by the algorithm. Imagine before making the claim [1], Apple conducted an experiment to test the performance of FaceID, and you are an observer who has the job to create the Confusion Matrix and gives the CEO the true accuracy/error. Ground truth means you know the real owner of the phone, whereas prediction is locking/unlocking the screen behavior of FaceID, implying if it recognizes owner or not. Once this is clear, I will introduce 4 new terms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;True Positive: predict as type A and the ground truth is type A.&lt;/li&gt;
  &lt;li&gt;False Positive: predict as type A and the ground truth is not-type  A.&lt;/li&gt;
  &lt;li&gt;True Negative: predict as not-type A and the ground truth is not-type A.&lt;/li&gt;
  &lt;li&gt;False Negative: predict as not-type A and the ground truth is type A.
I’m positive that the above list is self-explanatory, and we simply calculate accuracy/error by counting samples in below table.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\begin{aligned} 
accuracy =&amp;amp; \frac{true positive \: + \: true negative}{total samples}\\[0.5em]
error =&amp;amp; \frac{false positive \: + \: false negative}{total samples}
\end{aligned}&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned} 
accuracy =&amp; \frac{true positive \: + \: true negative}{total samples}\\[0.5em]
error =&amp; \frac{false positive \: + \: false negative}{total samples}
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Actually Owner&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;Actually Stranger&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Recognize as Owner&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;(a)True Positive&lt;/td&gt;
      &lt;td&gt;(b)False Positive&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Recognize as Stranger&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;(a)False Negative&lt;/td&gt;
      &lt;td&gt;(b)True Negative&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To push this a bit further, as a user, our concerns are preventing strangers from having access to the phone, therefore it does not matter much (besides user experience) if it fails to recognize you. In some problems, one false must be treated seriously than the other one. From the perspective of security, mistaking strangers as user causes much damage than the other way around, for example.&lt;/p&gt;

&lt;p&gt;Other 2 True terms are not less important, in fact, people invent several terms constructed from these 4 cells. For a better understanding of Confusion Matrix, I suggest checking [3].&lt;/p&gt;

&lt;p&gt;In conclusion, the point I want to make is that people should not make any judgments simply from 2 seemingly similar cases, but actually turns out to be 2 different things. And, you know how to verify that for such news in the future, don’t you?&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt; 
  &lt;li&gt;http://www.macworld.co.uk/feature/iphone/how-secure-is-face-id-3663992/&lt;/li&gt;
  &lt;li&gt;http://www.bbc.com/news/technology-41266216&lt;/li&gt;
  &lt;li&gt;https://machinelearningmastery.com/confusion-matrix-machine-learning/&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">After September 12 Apple-event, the news of the new iPhone X and its cutting-edge facial recognition technology, namely FaceID, run all over the place. Besides a big leap in price in mobile-market making people suddenly be aware of their internal organ value, an inevitable question pops up about the reliability of FaceID. On one hand, it’s totally convenient to look at the screen and the phone automatically unlocks itself. On the other hand, such kind of privacy protection was proved to be imprecise from time to time and could be faked by a whole bunch of simple (or not) tricks: a photo of the owner, her video, or even a 3D model.</summary></entry><entry><title type="html">Bayes’ Rule A Tutorial Introduction to Bayesian Analysis - James V Stone</title><link href="http://localhost:4000/blog/2017-05-02-bookreview-bayes-rule/" rel="alternate" type="text/html" title="Bayes' Rule A Tutorial Introduction to Bayesian Analysis - James V Stone" /><published>2017-05-02T00:00:00+08:00</published><updated>2017-05-02T00:00:00+08:00</updated><id>http://localhost:4000/blog/bookreview-bayes-rule</id><content type="html" xml:base="http://localhost:4000/blog/2017-05-02-bookreview-bayes-rule/">&lt;p&gt;Last week was such an unforgettable experience, thus I want to get my hand dirty right away to prepare a solid foundation for the ahead journey. And there is nothing better to start with than one of James V Stone’s books: &lt;a href=&quot;https://www.amazon.com/Bayes-Rule-Tutorial-Introduction-Bayesian/dp/0956372848&quot;&gt;Bayes’ Rule A Tutorial Introduction to Bayesian Analysis&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This book review is about my overall evaluation after finishing the book. In addition, not only do I summarise the key ideas in each chapter to provide more insightful of the lessons I have learned, but I also try to share my thought relating to personal experience. The book consists of 7 chapters, which I spent 1-2 hours for one chapter per day, though the contents vary in difficulty level and some require basic prior knowledge about probability. &lt;/p&gt;

&lt;p&gt;Do not fear my friend, I can tell you that this book is not a novel kind to read when you seek for a place to relax your mind, but it is definitely a good choice for one who wonders where to start with Bayesian thingy. As pointed out right from the beginning, the author chooses the bottom-up approach, which means showing examples first before coming to any general conclusion. This requires some repetition which might annoy intermediate level audiences, but a necessary step to clear any doubts before discussing any deeper topics. I do not see it as a burden, in fact, I am very appreciated for the author’s effort to explain everything plainly in a tradeoff for the book’s wide broad of target audiences. Overall, this book merely covers a tip of the iceberg. However, it provides a guide to where we should follow next in the Appendix, which is reasonable for a tutorial with 170 pages. No need to wait, next I will summarise the chapters one by one and hope this turns out to be useful for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 1&lt;/strong&gt; first introduces an informal notion of probability in general, comes along with an intuitive Bayesian inference to solve 3 toy problems. Though it is trivial, this puts up an interesting question: “Do we make reasonable decisions in daily life by asking the right question?”. By re-introducing the same problem in variable domains, this naturally leads to a gradual comprehension, which is well enough to differentiate the meaning between &lt;em&gt;likelihood&lt;/em&gt; and a &lt;em&gt;posterior&lt;/em&gt;. It shows that, at first glance, people make decision associated with &lt;em&gt;maximum likelihood estimation&lt;/em&gt; (MLE), whereas a more correct way is observing the &lt;em&gt;maximum a posteriori&lt;/em&gt; (MAP). 4 main factors in Bayes’ Rule (equation at below) and inverse probability reasoning(an important part) are well-defined right after that to ensure the audiences do not miss anything.&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\begin{aligned}
posterior &amp;amp;= \frac{likelihood \: \times \: prior}{marginal \: likelihood} \\[0em]
\end{aligned}&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{aligned}
posterior &amp;= \frac{likelihood \: \times \: prior}{marginal \: likelihood} \\[0em]
\end{aligned} %]]&gt;&lt;/script&gt;

&lt;p&gt;One picture is worth a thousand words, and in &lt;strong&gt;Chapter 2&lt;/strong&gt;, the author literally did it. By putting &lt;code class=&quot;MathJax_Preview&quot;&gt;marginal \: likelihood&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;marginal \: likelihood&lt;/script&gt; of parameter &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; and observed data &lt;code class=&quot;MathJax_Preview&quot;&gt;x&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; together to form the geometric area of joint probability &lt;code class=&quot;MathJax_Preview&quot;&gt;p(x,\phi)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(x,\phi)&lt;/script&gt;, a more insightful understanding of how to find conditional probability &lt;code class=&quot;MathJax_Preview&quot;&gt;p(\phi \vert x)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(\phi \vert x)&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;p(x \vert \phi)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(x \vert \phi)&lt;/script&gt;, corresponding to &lt;code class=&quot;MathJax_Preview&quot;&gt;posterior&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;posterior&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;likelihood&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;likelihood&lt;/script&gt; respectively, are gained. It is a proof that, in mathematics’ perspective, if all required data are available then you can treat &lt;code class=&quot;MathJax_Preview&quot;&gt;p(\phi \vert x)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(\phi \vert x)&lt;/script&gt; and &lt;code class=&quot;MathJax_Preview&quot;&gt;p(x \vert \phi)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(x \vert \phi)&lt;/script&gt; in the exactly same way. However,  their meanings are totally different. Furthermore, joint probability is rarely found in practice, thus one probability is easily obtained whereas the other one must be deduced via &lt;code class=&quot;MathJax_Preview&quot;&gt;prior&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;prior&lt;/script&gt;. Unfortunately, the seeking answer is the second one.&lt;/p&gt;

&lt;p&gt;The warrior who was equipped with shining armour and weapon is ready to slay the dragon. So far the possible outcome of considered parameter is only two, and &lt;strong&gt;Chapter 3&lt;/strong&gt; pushes it further where parameter could take multiple values. Basically, all learned knowledge would apply on the discrete parameter value, provided with 5 typical questions in order to show audience exact way to calculate desired probabilities. Also, Bayes’ Rule now has a solid proof based on product rule on joint probability &lt;code class=&quot;MathJax_Preview&quot;&gt;p(x,\phi)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(x,\phi)&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;One step further than discrete is continuous, &lt;strong&gt;Chapter 4&lt;/strong&gt; basically did the same thing but it sheds some light on analytics perspective thanks to the power of calculus. Imagine you have to test every single value of the parameter to find the most probable parameter, instead of knowing where to find it right away and save the time for your favourite coffee. It is no magic than the first derivative of the probability function of &lt;code class=&quot;MathJax_Preview&quot;&gt;posterior&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;posterior&lt;/script&gt;. Besides that, a simple yet amazing technique is introduced to calculate &lt;code class=&quot;MathJax_Preview&quot;&gt;posterior&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;posterior&lt;/script&gt; on the fly when keep updating newly observed data. This, I suspect, how spam filter works to improve its ability to detect a suspicious email. One last thing, even though MAP is the one we desired for, in some circumstances when strong assumptions are valid to make, MLE could be used to approximate it with an implicit uniform prior probability distribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 5&lt;/strong&gt; is one of my favourites, especially if you are interested in applying this theory into Machine Learning. Given a set of data points, the question is how to find a regression line that fits them best. The author takes the scale and intercept of the line as a parameter, and throughout a chain of deduction, the MAP turns out to be nothing other than Least Square Estimate (LSE), or more familiar with the name Least Square Error. If one puts more thinking on this, she may come up with an algorithm herself to find the regression line. How obvious is it!!!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 6&lt;/strong&gt; plots the joint probability distribution with one more dimension - density. To be honest, I do not fully understand the concept here, but it reminds me of a story. Back in high school, the teacher asked us to approximate bias of one coin by flipping and recording the number of heads/tails. If you understand at least up to Chapter 2, we can see that there is a big loop here when the question is &lt;code class=&quot;MathJax_Preview&quot;&gt;p(\phi \vert x)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(\phi \vert x)&lt;/script&gt;, but we were asked to approximate with &lt;code class=&quot;MathJax_Preview&quot;&gt;p(x \vert \phi)&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;p(x \vert \phi)&lt;/script&gt;. In fact, this approach is true if and only if the data &lt;code class=&quot;MathJax_Preview&quot;&gt;x&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and parameter &lt;code class=&quot;MathJax_Preview&quot;&gt;\phi&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; are correlated in some manner. Otherwise, if data and parameter are independent, the only way to make this true is assuming &lt;code class=&quot;MathJax_Preview&quot;&gt;prior&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;prior&lt;/script&gt; is a uniform probability distribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chapter 7&lt;/strong&gt; tells a different yet interesting story as well. It is about the resurrection of Bayesian methods in the 20th century, the non-exhausted war between Bayesians and frequentists, and so on…  I would not spoil the content here because it is so exciting to know a theory can reflect a life philosophy.&lt;/p&gt;

&lt;p&gt;I do my best to interpret the content of the book, thus much detailed information was skipped such as Gaussian distribution, ignorance in marginal likelihood… And you know where to find them, aren’t you?&lt;/p&gt;

&lt;p&gt;The purpose of this review is an insignificant effort to support for this book. However, the book could not satisfy one question of mine: “How can one comes up with an algorithm based on generated stories?”. I keep having it in mind because I saw people used Bayes’ Rule in Statistical Machine Translation task, and I can not answer it (and maybe the question is not clear enough to most of you, I myself also quite confused whether is it a right one or not).&lt;/p&gt;

&lt;p&gt;To be fair, the book does not cover this topic so you should take it no more than a personal opinion. I put it here because I thought someone may share the same interest with me. Hope you find this motivate you in getting to know more about Bayesian Analysis.&lt;/p&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Last week was such an unforgettable experience, thus I want to get my hand dirty right away to prepare a solid foundation for the ahead journey. And there is nothing better to start with than one of James V Stone’s books: Bayes’ Rule A Tutorial Introduction to Bayesian Analysis.</summary></entry><entry><title type="html">Run GIZA faster with .sh parameter</title><link href="http://localhost:4000/blog/2016-09-03-run-giza-sh/" rel="alternate" type="text/html" title="Run GIZA faster with .sh parameter" /><published>2016-09-03T00:00:00+08:00</published><updated>2016-09-03T00:00:00+08:00</updated><id>http://localhost:4000/blog/run-giza-sh</id><content type="html" xml:base="http://localhost:4000/blog/2016-09-03-run-giza-sh/">&lt;p&gt;Main Contributor: Nguyễn Ngọc Gia Hy&lt;/p&gt;

&lt;p&gt;One of my reader sees that my running GIZA++ &lt;a href=&quot;/blog/2016-01-27-install-giza-ubuntu/&quot;&gt;method&lt;/a&gt; is still slow and does not utilize all potential of .sh file. So he decided writes one himself and sent the instruction to me:&lt;/p&gt;

&lt;ol&gt; 
  &lt;li&gt;Download RunGIZA++.sh &lt;a href=&quot;https://github.com/hovinh/giza&quot;&gt;here&lt;/a&gt; and put it in giza-pp (folder you got when downloading GIZA++ source code).&lt;/li&gt;
  &lt;li&gt;Open Terminal, move to giza-pp folder.&lt;/li&gt;
  &lt;li&gt;Type this line:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sh RunGIZA++.sh &amp;lt;arg1&amp;gt; &amp;lt;arg2&amp;gt; &amp;lt;arg3&amp;gt; &amp;lt;arg4&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&amp;lt;arg1&amp;gt;: link to folder containing corpus&lt;/li&gt;
  &lt;li&gt;&amp;lt;arg2&amp;gt;: source file’sname&lt;/li&gt;
  &lt;li&gt;&amp;lt;arg3&amp;gt;: target file’s name&lt;/li&gt;
  &lt;li&gt;&amp;lt;arg4&amp;gt;: link to folder containing result file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sh RunGIZA++.sh &lt;span class=&quot;s1&quot;&gt;'/home/vinh/Desktop/Corpus'&lt;/span&gt; Source Target &lt;span class=&quot;s1&quot;&gt;'/home/vinh/Desktop/Corpus'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have to confess, you don’t need to concern about long and confusing command lines anymore, only take a slip of coffee and wait for it to be done.&lt;/p&gt;

&lt;p&gt;However. I also meet a few problems when try it the first time, hope you don’t make the same mistake:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Give permission for RunGIZA++.sh file as &lt;strong&gt;“Allow executing file as program“&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Guarantee link to folder does exist.&lt;/li&gt;
  &lt;li&gt;Name of 2 files Source and Target should not contain extension, or at least not the familiar one. If I name them as “Source.txt” and “Target.txt”, you will get an error like &lt;strong&gt;“cannot open vocabulary files”&lt;/strong&gt;. On the other hand, if their names are “Source.en” và “Target.vn” or no extension, everything will be file.&lt;/li&gt;
  &lt;li&gt;Name of file or folder in link should not contain space, or it can also lead to unexpected error.
I guess that GIZA automatically cut off familiar extension from file name and then get the remaining string to name output files. We can see this when looking at the Terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Case 1:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/vinh/Desktop/Try/Source.txt -&amp;gt; Source
/home/vinh/Desktop/Try/Target.txt -&amp;gt; Target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Case 2:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/vinh/Desktop/Try/Source.en -&amp;gt; Source.en
/home/vinh/Desktop/Try/Target.vn -&amp;gt; Target.vn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Main Contributor: Nguyễn Ngọc Gia Hy</summary></entry><entry><title type="html">Install MOSES on Ubuntu</title><link href="http://localhost:4000/blog/2016-04-30-install-moses/" rel="alternate" type="text/html" title="Install MOSES on Ubuntu" /><published>2016-04-30T00:00:00+08:00</published><updated>2016-04-30T00:00:00+08:00</updated><id>http://localhost:4000/blog/install-moses</id><content type="html" xml:base="http://localhost:4000/blog/2016-04-30-install-moses/">&lt;p&gt;Moses is popular system in statistical machine translation, but quite hard to install. This post helps amateur to get used to with Moses for the first time, enough to use without caring about complex parameters. But if you want to improve your system, more understanding about &lt;strong&gt;tuning&lt;/strong&gt; is required to achieve best result.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install aligment tool: &lt;a href=&quot;/blog/2016-01-27-install-giza-ubuntu&quot;&gt;GIZA&lt;/a&gt; or &lt;a href=&quot;/blog/2016-04-29-install-mgiza-ubuntu&quot;&gt;MGIZA&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Install language model: &lt;a href=&quot;/blog/2016-04-22-install-srilm-ubuntu&quot;&gt;SRILM&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Install Ubuntu package
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;build-essential git-core pkg-config automake libtool &lt;span class=&quot;nb&quot;&gt;wget &lt;/span&gt;zlib1g-dev python-dev libbz2-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Open Terminal:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/moses-smt/mosesdecoder.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mosesdecoder
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To compile you need Boost, however there is version you could crash your compile process if use it.  The person who is in charge of Moses(Mr. Hieu Hoang) suggests using 1.55, I am fond of 1.60. So if anything goes wrong, the problem might be Boost version is incompatible. The purpose of using many lines  for boost is to install in private folder, not in system folder. So you don’t need superuser authority to run.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wget &lt;/span&gt;http://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf boost_1_60_0.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;boost_1_60_0/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bootstrap.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./b2 -j4 --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt; --libdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;/lib64 --layout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;FAILURE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running, if it says SUCCESS then OK, otherwise FAILURE. However, if it is FAILURE, you just keep doing the next step to see if something goes wrong. If so, come back to reinstall Boost with different version :))&lt;/p&gt;

&lt;p&gt;Now compile  Moses&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./bjam --with-boost&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/workspace/temp/boost_1_60_0 -j4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If success, there will be a “SUCCESS” line on Terminal.&lt;/p&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;
&lt;p&gt;You will have data of step n-1, now try to run nth step to see if the result as we expect.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/mosesdecoder
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wget &lt;/span&gt;http://www.statmt.org/moses/download/sample-models.tgz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf sample-models.tgz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sample-models
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;~/mosesdecoder/bin/moses -f phrase-model/moses.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go to ”/mosesedecoder/sample-models/out”. If 2 lines below show up, then congratulate, you have successfuly installed Moses.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a small house&lt;br /&gt;
This is a small house&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;configuring-for-real-run&quot;&gt;Configuring for real run:&lt;/h2&gt;

&lt;p&gt;This step is extremely complicated. Fortunately, we have a shortcut, which is EMS.&lt;/p&gt;

&lt;h3 id=&quot;installing-somepackages&quot;&gt;Installing some packages:&lt;/h3&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;imagemagick --fix-missing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;graphviz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install gv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;createfolder&quot;&gt;Create folder:&lt;/h3&gt;

&lt;p&gt;I choose aligment tool is GIZA++ and language model is SRILM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FolderA contains corpus, including: &lt;a href=&quot;https://gist.github.com/lngvietthang/907b74187b88994cb6ee77820a9bdf6d&quot;&gt;convTxt2Sgm.py&lt;/a&gt;, weight.ini(copy from ”/mosesdecoder/scripts/ems/example/data”), data.en, data.vn, test.en, test.vn(These 4 files actually are 2 billingual corpus, but split in ratio 9:1 for training and testing, .data for training and .test for testing. You can also create validate file for tuning). Directory: “/home/phdlab/Desktop/HoXuanVinh/Corpus”.&lt;/li&gt;
  &lt;li&gt;FolderB contains GIZA. Including: GIZA++, mkcls and snt2cooc.out. Directory: “/home/phdlab/mosesdecoder/tools”&lt;/li&gt;
  &lt;li&gt;FolderC(do not need to create) contains ”experiment.perl”. Directory: “/home/phdlab/mosesdecoder/scripts/ems”&lt;/li&gt;
  &lt;li&gt;FolderD is working directory, all results when running are saved here. Directory: “/home/phdlab/Desktop/HoXuanVinh/Vinh”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preparing-data-for-running-infoldera&quot;&gt;Preparing data for running in FolderA:&lt;/h3&gt;

&lt;p&gt;Assumes you had 2 files “source.txt” and ”target.txt”, you will use code here to split them into trainining set và test set. If we have 2 billingual corpus English-Vietnamese, then their names will be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;data.en: English corpus for training&lt;/li&gt;
  &lt;li&gt;data.vn: Vietnamese corpus for training&lt;/li&gt;
  &lt;li&gt;test.en: English corpus for testing&lt;/li&gt;
  &lt;li&gt;test.vn: Vietnamese corpus for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then convert .test file as format of Moses.&lt;/p&gt;

&lt;p&gt;Open Terminal, move to FolderA and type:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python convTxt2Sgm.py -src test.en -ref test.vn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration:&lt;/h3&gt;

&lt;p&gt;Go to ”/home/phdlab/mosesdecoder/scripts/ems/example”, open file config.toy and edit.&lt;/p&gt;

&lt;p&gt;Line 9(FolderD):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;working-dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/Desktop/HoXuanVinh/Vinh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 13-15:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input-extension &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; en
output-extension &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; vn
pair-extension &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; en-vn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 20(folder contains moses), 29(folder containes executive files of GIZA/MGIZA):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;moses-scr-dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/mosesdecoder
external-bin-dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$moses&lt;/span&gt;-src-dir/tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 32 (if choose srilm then comment out # irstlm, randlm):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;working-dir &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/Desktop/HoXuanVinh/Vinh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 42(FolderA):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;toy-data &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/Desktop/HoXuanVinh/Corpus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 92(number of cores):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cores &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 141, 142, 150(configure parameter for SRILM and comment out other language model):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lm-training &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$srilm&lt;/span&gt;-dir/ngram-count
setting &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-interpolate -kndiscount -unk&quot;&lt;/span&gt;
order &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 198 - 220, 486-513 (if  Tuning then change here, otherwise pass).&lt;/p&gt;

&lt;p&gt;Line 292. If use MGIZA, add parameter you want:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;training-options &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -mgiza -mgiza-cpus 8 -sort-parallel 8 -cores 8 -parallel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Line 317. Uncomment.&lt;/p&gt;

&lt;p&gt;Line 657, 665:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input-sgm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toy&lt;/span&gt;-data/test.&lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt;-extension.sgm
reference-sgm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$toy&lt;/span&gt;-data/test.&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;-extension.sgm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running&quot;&gt;Running:&lt;/h3&gt;

&lt;p&gt;Open Terminal, move to folderC. Type:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./experiment.perl -config example/config.toy -exec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When running, a graph will shows you which module Moses is running, if it turns red then there is error. Keep calm and open “FolderD/steps”. You will see folder numbered from 1. The number tells the numerical order of the time you run Moses. If you meet error in the first time run, go to  folder “1”. Look for error module with extension .STDERR, open and check the bug.&lt;/p&gt;

&lt;p class=&quot;figure&quot;&gt;&lt;img src=&quot;/assets/blog/2016-04-30/moses_graph.jpg&quot; alt=&quot;Moses's graph&quot; data-width=&quot;1440&quot; data-height=&quot;836&quot; /&gt;
Execute Graph and the red module shows something is wrong.&lt;/p&gt;

&lt;p&gt;At the end of the process, open FolderD, folder evaluation, look for ”test.output” file(See test result) and ”test.nist-bleu” (to check BLEU score and alignement result). Good luck.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;weight.ini is initialised weigth file of model. If know how to Tuning, then you can get the weight from there.&lt;/li&gt;
    &lt;li&gt;Original Website says that with  130.000 pair of sentences, alignment result is quite low,  which mean you need larger and clean corpus for better result.&lt;/li&gt;
    &lt;li&gt;Whenever you get an error and confusing, open ”train-model.perl” in “mosesdecoder/scripts/training” to check argument and error message in SDTERR file..&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;http://www.statmt.org/moses/?n=Moses.Baseline&lt;/li&gt;
  &lt;li&gt;http://www.statmt.org/moses/?n=Development.GetStarted&lt;/li&gt;
  &lt;li&gt;http://www.statmt.org/moses/?n=FactoredTraining.EMS&lt;/li&gt;
  &lt;li&gt;https://gist.github.com/lngvietthang/907b74187b88994cb6ee77820a9bdf6d&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Moses is popular system in statistical machine translation, but quite hard to install. This post helps amateur to get used to with Moses for the first time, enough to use without caring about complex parameters. But if you want to improve your system, more understanding about tuning is required to achieve best result.</summary></entry><entry><title type="html">Install MGIZA on Ubuntu</title><link href="http://localhost:4000/blog/2016-04-29-install-mgiza-ubuntu/" rel="alternate" type="text/html" title="Install MGIZA on Ubuntu" /><published>2016-04-29T00:00:00+08:00</published><updated>2016-04-29T00:00:00+08:00</updated><id>http://localhost:4000/blog/install-mgiza-ubuntu</id><content type="html" xml:base="http://localhost:4000/blog/2016-04-29-install-mgiza-ubuntu/">&lt;p&gt;MGIZA stands for Multi-threaded GIZA, show up the faster ability in compare to  GIZA by using parallel computing advantage. Installing steps in MGIZA is simpler than GIZA, most of them due to helpful config file of referent author.&lt;/p&gt;

&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&amp;quot;]&quot;&gt;$ sudo apt-get install cmake
$ sudo apt-get install libboost-all-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/moses-smt/mgiza.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mgiza/mgizapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go to folder “manual-compile”, open file compile.sh and edit: SRC_DIR (link to  source code file of MGIZA), BOOST_ROOT(Private folder for installing boost - Check the Note section below), BOOST_INCLUDE, BOOST_LIBRARYDIR. For example:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SRC_DIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/Desktop/HoXuanVinh/Tool/mgiza/mgizapp/src
BOOST_ROOT &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/phdlab/boost_1_60_0
BOOST_INCLUDE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BOOST_ROOT&lt;/span&gt;/include
BOOST_LIBRARYDIR &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$BOOST_ROOT&lt;/span&gt;/lib64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start to compile&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;manual-compile/compile.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;execution&quot;&gt;Execution&lt;/h2&gt;

&lt;p&gt;In order to run MGIZA, we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All files in folder mgizapp/bin&lt;/li&gt;
  &lt;li&gt;File merge_alignment.py( in ”mgizapp/inst/scripts”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy all files into 1 same folder(My folder is ”/home/phdlab/Tool/Mgiza/bin”). For this demo, I copy my 2 corpus ”data.en” and ”data.vn” also to this folder. Open Terminal and move to that folder with “cd” command.&lt;/p&gt;

&lt;p&gt;The following steps wotk with assumption that 2 input data named “data.en” and ”data.vn”, you need to change a little bit to fix your own data.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./mkcls -n10 -pdata.en -Vdata.en.vcb.classes
./mkcls -n10 -pdata.vn -Vdata.vn.vcb.classes
./plain2snt &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.en &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.vn
./snt2cooc &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.en_data.vn.cooc &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.en.vcb &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.vn.vcb &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;.en_data.vn.snt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Download file “configfile” at &lt;a href=&quot;https://pastebin.com/b1ksHtUy&quot;&gt;here&lt;/a&gt; and save in same folder.&lt;/p&gt;

&lt;p&gt;You can choose number of threads for MGIZA by change value of variable ”ncpus”. For example, your computer has  4 cores then double it and type “ncpus 8”. You need to edit  ”corp.tok.low.src” into ”data.en” and ”corp.tok.low.trg” into ”data.vn”. Save it.&lt;/p&gt;

&lt;p&gt;Now type this line:&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./mgiza configfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GIZA save result into file named “A3.final”,  to Mgiza, the more threads you choose, the more files you have, yet the name stays the same. Your work is merging them into 1 file.&lt;/p&gt;

&lt;blockquote class=&quot;lead&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;If file’s size is too small, maybe the program will crash, then solution is moving to GIZA++.&lt;/li&gt;
    &lt;li&gt;In the last line of installing section, you need Boost to compile.  Do the following steps:Boost has version could crash if compile. I suggest version 1.60. The decision is  yours, but if compile unsuccessfule, the high risk might be incompatible version of Boost. The purpose of using many lines  for boost is to install in private folder, not in system folder. So you don’t need superuser authority to run.
      &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$wget&lt;/span&gt; http://downloads.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.gz
&lt;span class=&quot;nv&quot;&gt;$tar&lt;/span&gt; zxvf boost_1_60_0.tar.gz
&lt;span class=&quot;nv&quot;&gt;$cd&lt;/span&gt; boost_1_60_0/
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/bootstrap.sh
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/b2 -j4 --prefix&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt; --libdir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;/lib64 --layout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;static &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;FAILURE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;After running, if it says SUCCESS then OK, otherwise FAILURE. However, if it is FAILURE, you just keep doing the next step to see if something goes wrong. If so, come back to reinstall Boost with different version :))&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;If there is any error in running commands in Terminal, try superuser authority with keyword ”sudo”.
Reference:&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;http://www.statmt.org/moses/?n=Moses.ExternalTools#ntoc3&lt;/li&gt;
  &lt;li&gt;https://fabioticconi.wordpress.com/2011/01/17/how-to-do-a-word-alignment-with-giza-or-mgiza-from-parallel-corpus/&lt;/li&gt;
  &lt;li&gt;http://www.statmt.org/moses/?n=Development.GetStarted&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">MGIZA stands for Multi-threaded GIZA, show up the faster ability in compare to  GIZA by using parallel computing advantage. Installing steps in MGIZA is simpler than GIZA, most of them due to helpful config file of referent author.</summary></entry><entry><title type="html">Install SRILM on Ubuntu</title><link href="http://localhost:4000/blog/2016-04-22-install-srilm-ubuntu/" rel="alternate" type="text/html" title="Install SRILM on Ubuntu" /><published>2016-04-22T00:00:00+08:00</published><updated>2016-04-22T00:00:00+08:00</updated><id>http://localhost:4000/blog/install-srilm-ubuntu</id><content type="html" xml:base="http://localhost:4000/blog/2016-04-22-install-srilm-ubuntu/">&lt;p&gt;Installing SRILM on Ubuntu is much simpler than on Windows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Download the  latest version of &lt;a href=&quot;http://www.speech.sri.com/projects/srilm/download.html&quot;&gt;SRILM&lt;/a&gt; (current version is srilm-1.7.1), move downloaded file to “/Home”.&lt;/li&gt;
  &lt;li&gt;Open Terminal, type below commands (default directory is  “/usr/share/srilm”, in case you want to change, then replace it with equivalent link):
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /usr/share/srilm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;srilm-1.7.1.tar.gz /usr/share/srilm/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/share/srilm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvf srilm-1.7.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Open Makefile file
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gedit Makefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Change Makefile: In line 7, you look for line with content looks like  “# SRILM = /home/speech/stolcke/project/srilm/devel”. Remove “#” and replace with this line:
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;SRILM &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /usr/share/srilm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and close file. Go back to  Terminal, use superuser permission. If you meet error ”tcsh: command not found” then type “sudo apt-get install tcsh” before try it again.If yours is  Ubuntu 32 bit:
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcsh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;NO_TCL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;MACHINE_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i686-gcc4 World
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./bin/i686-gcc4/ngram-count -help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Or if it is Ubuntu 64 bit:
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;tcsh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nv&quot;&gt;NO_TCL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;MACHINE_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i686-m64 World
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./bin/i686-m64/ngram-count -help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;execute-srilm&quot;&gt;Execute SRILM:&lt;/h2&gt;

&lt;p&gt;Access this &lt;a href=&quot;https://github.com/hovinh/srilm&quot;&gt;link&lt;/a&gt; to download related corpus and code. Copy 2 file corpus.txt and vocab.txt(vocabulary of words in corpus) into ‘\usr\share\srilm\bin\i686-gcc4’(for 32 bit) or “\usr\share\srilm\i686-m64”(for 64 bit). Manual copy might do not work, you could use Terminal, go to folder containing those files and type:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;vocab.txt &lt;span class=&quot;s1&quot;&gt;'/usr/share/srilm/bin/i686-m64'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp &lt;/span&gt;corpus.txt &lt;span class=&quot;s1&quot;&gt;'/usr/share/srilm/bin/i686-m64'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now move to above folder and run the program&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/usr/share/srilm/bin/i686-m64'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./ngram-count -vocab vocab.txt -text corpus.txt -order 3 -write count.txt -unk
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./ngram-count -vocab vocab.txt -read count.txt -order 3 -lm lm.lm -gt1min 3 -gt1max 7 - gt2min 3 - gt2max 7 -gt3min 3 - gt3max 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you do it correctly, you will get 2 new files named “count.txt” and “lm.lm”. Have a look at them to see what had happened :))&lt;/p&gt;

&lt;blockquote class=&quot;lead&quot;&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
In command lines, you might get in trouble with errors such  as “Permission denied”, then you should add “sudo” ahead, which gives you superuser permission. For example if line 4 gets error, you should change it to “sudo tar xvf srilm-1.7.1.tar.gz”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;http://www.cs.brandeis.edu/~cs114/CS114_docs/SRILM_Tutorial_20080512.pdf&lt;/li&gt;
  &lt;li&gt;http://askubuntu.com/questions/507659/how-do-i-install-srilm-on-ubuntu-14-04&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Xuan Vinh Ho</name><email>hxvinh@comp.nus.edu.sg</email></author><summary type="html">Installing SRILM on Ubuntu is much simpler than on Windows.</summary></entry></feed>